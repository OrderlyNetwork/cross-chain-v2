{
  "address": "0xB28bD47228ed4b02A954c1490071c073Fb075909",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "optionType",
          "type": "uint16"
        }
      ],
      "name": "InvalidOptionType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "InvalidOptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "EnforcedOptionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        }
      ],
      "name": "MessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct MessagingReceipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "method",
          "type": "uint8"
        }
      ],
      "name": "MsgReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Ping",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Pong",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        }
      ],
      "name": "ReceiveMesage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        }
      ],
      "name": "addChainIdMapping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ccManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainId2Eid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_msgType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        }
      ],
      "name": "combineOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "eid2ChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "msgType",
          "type": "uint16"
        }
      ],
      "name": "enforcedOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "enforcedOption",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "method",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "option",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "payloadDataType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "srcCrossChainManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstCrossChainManager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "srcChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstChainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderlyCrossChainMessage.MessageV1",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "estimateGasFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_method",
          "type": "uint8"
        }
      ],
      "name": "getLzOption",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "lzOptions",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "lzGas",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lzValue",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dstChainId",
          "type": "uint256"
        }
      ],
      "name": "pingPong",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "method",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "option",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "payloadDataType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "srcCrossChainManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstCrossChainManager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "srcChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstChainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderlyCrossChainMessage.MessageV1",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "method",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "option",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "payloadDataType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "srcCrossChainManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstCrossChainManager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "srcChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstChainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderlyCrossChainMessage.MessageV1",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "sendMessageWithFee",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "refundReceiver",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "method",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "option",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "payloadDataType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "srcCrossChainManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstCrossChainManager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "srcChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstChainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderlyCrossChainMessage.MessageV1",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "sendMessageWithFeeRefund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ccManager",
          "type": "address"
        }
      ],
      "name": "setCCManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "setEnforcedOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_method",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "_lzGas",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_lzValue",
          "type": "uint128"
        }
      ],
      "name": "setMethodOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_peers",
          "type": "bytes32[]"
        }
      ],
      "name": "setPeers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd08a8d5a0449c7a1f22ccf3b22ccd0b46bbdb552e8050060d18fbbf5a3044e43",
  "receipt": {
    "to": null,
    "from": "0xDd3287043493E0a08d2B348397554096728B459c",
    "contractAddress": "0xB28bD47228ed4b02A954c1490071c073Fb075909",
    "transactionIndex": 4,
    "gasUsed": "3116433",
    "logsBloom": "0x
    "blockHash": "0xc4190f7212bc65502ebf485561d40a64e8e06d8d71799a4d44a0de81f1a41963",
    "transactionHash": "0xd08a8d5a0449c7a1f22ccf3b22ccd0b46bbdb552e8050060d18fbbf5a3044e43",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 26494721,
        "transactionHash": "0xd08a8d5a0449c7a1f22ccf3b22ccd0b46bbdb552e8050060d18fbbf5a3044e43",
        "address": "0xB28bD47228ed4b02A954c1490071c073Fb075909",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0xc4190f7212bc65502ebf485561d40a64e8e06d8d71799a4d44a0de81f1a41963"
      }
    ],
    "blockNumber": 26494721,
    "cumulativeGasUsed": "3363228",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "29c704a93f0ff050fe8a961f2b6fee02",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"optionType\",\"type\":\"uint16\"}],\"name\":\"InvalidOptionType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"InvalidOptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"EnforcedOptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct MessagingReceipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"method\",\"type\":\"uint8\"}],\"name\":\"MsgReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Ping\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pong\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"}],\"name\":\"ReceiveMesage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"addChainIdMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainId2Eid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"combineOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"eid2ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"}],\"name\":\"enforcedOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"enforcedOption\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"method\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"option\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"payloadDataType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"srcCrossChainManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstCrossChainManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderlyCrossChainMessage.MessageV1\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"estimateGasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_method\",\"type\":\"uint8\"}],\"name\":\"getLzOption\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lzOptions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lzGas\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lzValue\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"}],\"name\":\"pingPong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"method\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"option\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"payloadDataType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"srcCrossChainManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstCrossChainManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderlyCrossChainMessage.MessageV1\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"method\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"option\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"payloadDataType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"srcCrossChainManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstCrossChainManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderlyCrossChainMessage.MessageV1\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sendMessageWithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"method\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"option\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"payloadDataType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"srcCrossChainManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstCrossChainManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderlyCrossChainMessage.MessageV1\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sendMessageWithFeeRefund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ccManager\",\"type\":\"address\"}],\"name\":\"setCCManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"setEnforcedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_method\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_lzGas\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_lzValue\",\"type\":\"uint128\"}],\"name\":\"setMethodOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_peers\",\"type\":\"bytes32[]\"}],\"name\":\"setPeers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This is the main contract for the CrossChainRelayV2It implements the IOrderlyCrossChain interfaceIt inherits from the OAppUpgradeable and CrossChainRelayDataLayoutV2\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"ReceiveMesage((uint32,bytes32,uint64),bytes32)\":{\"params\":{\"_guid\":\"The guid of the message\",\"_origin\":\"The origin of the message\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addChainIdMapping(uint256,uint32)\":{\"params\":{\"_chainId\":\"The chain ID\",\"_eid\":\"The LayerZero EID\"}},\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"combineOptions(uint32,uint16,bytes)\":{\"details\":\"If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_extraOptions\":\"Additional options passed by the caller.\",\"_msgType\":\"The OAPP message type.\"},\"returns\":{\"_0\":\"options The combination of caller specified options AND enforced options.\"}},\"estimateGasFee((uint8,uint8,uint8,address,address,uint256,uint256),bytes)\":{\"params\":{\"data\":\"The cross-chain meta data\",\"payload\":\"The payload of the cc message\"},\"returns\":{\"_0\":\"The gas fee for the cc message, in native gas token\"}},\"getLzOption(uint8)\":{\"params\":{\"_method\":\"The method\"},\"returns\":{\"_0\":\"The LayerZero option, if the lzGas is 0, it will use the default gas limit\"}},\"initialize(address,address)\":{\"params\":{\"_delegate\":\"The delegate, the owner of the contract and the delegate to the LayerZero endpoint\",\"_lzEndpoint\":\"The LayerZero endpoint\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"params\":{\"_sender\":\"The sender address\",\"_srcEid\":\"The source endpoint ID\"},\"returns\":{\"_0\":\"The next nonce\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pingPong(uint256)\":{\"params\":{\"dstChainId\":\"The destination chain ID\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sendMessage((uint8,uint8,uint8,address,address,uint256,uint256),bytes)\":{\"params\":{\"data\":\"The cross-chain meta data\",\"payload\":\"The payload of the cc message\"}},\"sendMessageWithFee((uint8,uint8,uint8,address,address,uint256,uint256),bytes)\":{\"params\":{\"data\":\"The cross-chain meta data\",\"payload\":\"The payload of the cc message\"}},\"sendMessageWithFeeRefund(address,(uint8,uint8,uint8,address,address,uint256,uint256),bytes)\":{\"params\":{\"data\":\"The cross-chain meta data\",\"payload\":\"The payload of the cc message\",\"refundReceiver\":\"The receiver address for the lz fee refund\"}},\"setCCManager(address)\":{\"params\":{\"_ccManager\":\"The manager address\"}},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setEnforcedOptions((uint32,uint16,bytes)[])\":{\"details\":\"Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\",\"params\":{\"_enforcedOptions\":\"An array of EnforcedOptionParam structures specifying enforced options.\"}},\"setMethodOption(uint8,uint128,uint128)\":{\"params\":{\"_lzGas\":\"The gas limit for the transaction execution on the dst chain\",\"_lzValue\":\"The value to airdrop on the dst chain\",\"_method\":\"The method to set the gas limit for\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdrawNativeToken(address,uint256)\":{\"params\":{\"amount\":\"Amount of native tokens to withdraw\",\"to\":\"Recipient address\"}},\"withdrawToken(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to withdraw\",\"to\":\"Recipient address\",\"token\":\"Token address\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Ping()\":{\"notice\":\"Emitted when a ping message is received\"},\"Pong()\":{\"notice\":\"Emitted when a pong response is sent\"},\"ReceiveMesage((uint32,bytes32,uint64),bytes32)\":{\"notice\":\"Emitted when a message is received\"}},\"kind\":\"user\",\"methods\":{\"addChainIdMapping(uint256,uint32)\":{\"notice\":\"Adds a new chain ID mapping to LayerZero chain IDs\"},\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"ccManager()\":{\"notice\":\"Address of the cross-chain manager (Vault or Ledger) on this chain\"},\"chainId2Eid(uint256)\":{\"notice\":\"Maps native chain IDs to their corresponding Endpoint IDs\"},\"combineOptions(uint32,uint16,bytes)\":{\"notice\":\"Combines options for a given endpoint and message type.\"},\"eid2ChainId(uint32)\":{\"notice\":\"Reverse mapping of Endpoint IDs to native chain IDs\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"estimateGasFee((uint8,uint8,uint8,address,address,uint256,uint256),bytes)\":{\"notice\":\"Estimates the gas fee for a cc message\"},\"getLzOption(uint8)\":{\"notice\":\"Gets the LayerZero option for the given method\"},\"initialize(address,address)\":{\"notice\":\"Initializes the OApp\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"lzOptions(uint8)\":{\"notice\":\"Maps message flow types to their gas limits for cross-chain operations\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Gets the next nonce for the given source endpoint and sender address\"},\"nonce(uint32,bytes32)\":{\"notice\":\"Nonce mapping for each source endpoint and sender address\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"pingPong(uint256)\":{\"notice\":\"Tests a function, sends ping to another chain and expects pong back\"},\"sendMessage((uint8,uint8,uint8,address,address,uint256,uint256),bytes)\":{\"notice\":\"Sends a cross-chain message\"},\"sendMessageWithFee((uint8,uint8,uint8,address,address,uint256,uint256),bytes)\":{\"notice\":\"Sends a cross-chain message with fee\"},\"sendMessageWithFeeRefund(address,(uint8,uint8,uint8,address,address,uint256,uint256),bytes)\":{\"notice\":\"Sends a cross-chain message with fee\"},\"setCCManager(address)\":{\"notice\":\"Sets the manager address\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setMethodOption(uint8,uint128,uint128)\":{\"notice\":\"Sets the method gas limit mapping\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"},\"withdrawNativeToken(address,uint256)\":{\"notice\":\"Withdraws native tokens from the contract\"},\"withdrawToken(address,address,uint256)\":{\"notice\":\"Withdraws ERC20 tokens from the contract\"}},\"notice\":\"CrossChainRelayV2 contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossChainRelayV2.sol\":\"CrossChainRelayV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport { BitMap256 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\\\";\\nimport { CalldataBytesLib } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary DVNOptions {\\n    using CalldataBytesLib for bytes;\\n    using BytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 2;\\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\\n\\n    error DVN_InvalidDVNIdx();\\n    error DVN_InvalidDVNOptions(uint256 cursor);\\n\\n    /// @dev group dvn options by its idx\\n    /// @param _options [dvn_id][dvn_option][dvn_id][dvn_option]...\\n    ///        dvn_option = [option_size][dvn_idx][option_type][option]\\n    ///        option_size = len(dvn_idx) + len(option_type) + len(option)\\n    ///        dvn_id: uint8, dvn_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @return dvnOptions the grouped options, still share the same format of _options\\n    /// @return dvnIndices the dvn indices\\n    function groupDVNOptionsByIdx(\\n        bytes memory _options\\n    ) internal pure returns (bytes[] memory dvnOptions, uint8[] memory dvnIndices) {\\n        if (_options.length == 0) return (dvnOptions, dvnIndices);\\n\\n        uint8 numDVNs = getNumDVNs(_options);\\n\\n        // if there is only 1 dvn, we can just return the whole options\\n        if (numDVNs == 1) {\\n            dvnOptions = new bytes[](1);\\n            dvnOptions[0] = _options;\\n\\n            dvnIndices = new uint8[](1);\\n            dvnIndices[0] = _options.toUint8(3); // dvn idx\\n            return (dvnOptions, dvnIndices);\\n        }\\n\\n        // otherwise, we need to group the options by dvn_idx\\n        dvnIndices = new uint8[](numDVNs);\\n        dvnOptions = new bytes[](numDVNs);\\n        unchecked {\\n            uint256 cursor = 0;\\n            uint256 start = 0;\\n            uint8 lastDVNIdx = 255; // 255 is an invalid dvn_idx\\n\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                // optionLength asserted in getNumDVNs (skip check)\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                // dvnIdx asserted in getNumDVNs (skip check)\\n                uint8 dvnIdx = _options.toUint8(cursor);\\n\\n                // dvnIdx must equal to the lastDVNIdx for the first option\\n                // so it is always skipped in the first option\\n                // this operation slices out options whenever the scan finds a different lastDVNIdx\\n                if (lastDVNIdx == 255) {\\n                    lastDVNIdx = dvnIdx;\\n                } else if (dvnIdx != lastDVNIdx) {\\n                    uint256 len = cursor - start - 3; // 3 is for worker_id and option_length\\n                    bytes memory opt = _options.slice(start, len);\\n                    _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, opt);\\n\\n                    // reset the start and lastDVNIdx\\n                    start += len;\\n                    lastDVNIdx = dvnIdx;\\n                }\\n\\n                cursor += optionLength;\\n            }\\n\\n            // skip check the cursor here because the cursor is asserted in getNumDVNs\\n            // if we have reached the end of the options, we need to process the last dvn\\n            uint256 size = cursor - start;\\n            bytes memory op = _options.slice(start, size);\\n            _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, op);\\n\\n            // revert dvnIndices to start from 0\\n            for (uint8 i = 0; i < numDVNs; ++i) {\\n                --dvnIndices[i];\\n            }\\n        }\\n    }\\n\\n    function _insertDVNOptions(\\n        bytes[] memory _dvnOptions,\\n        uint8[] memory _dvnIndices,\\n        uint8 _dvnIdx,\\n        bytes memory _newOptions\\n    ) internal pure {\\n        // dvnIdx starts from 0 but default value of dvnIndices is 0,\\n        // so we tell if the slot is empty by adding 1 to dvnIdx\\n        if (_dvnIdx == 255) revert DVN_InvalidDVNIdx();\\n        uint8 dvnIdxAdj = _dvnIdx + 1;\\n\\n        for (uint256 j = 0; j < _dvnIndices.length; ++j) {\\n            uint8 index = _dvnIndices[j];\\n            if (dvnIdxAdj == index) {\\n                _dvnOptions[j] = abi.encodePacked(_dvnOptions[j], _newOptions);\\n                break;\\n            } else if (index == 0) {\\n                // empty slot, that means it is the first time we see this dvn\\n                _dvnIndices[j] = dvnIdxAdj;\\n                _dvnOptions[j] = _newOptions;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev get the number of unique dvns\\n    /// @param _options the format is the same as groupDVNOptionsByIdx\\n    function getNumDVNs(bytes memory _options) internal pure returns (uint8 numDVNs) {\\n        uint256 cursor = 0;\\n        BitMap256 bitmap;\\n\\n        // find number of unique dvn_idx\\n        unchecked {\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                if (optionLength < 2) revert DVN_InvalidDVNOptions(cursor); // at least 1 byte for dvn_idx and 1 byte for option_type\\n\\n                uint8 dvnIdx = _options.toUint8(cursor);\\n\\n                // if dvnIdx is not set, increment numDVNs\\n                // max num of dvns is 255, 255 is an invalid dvn_idx\\n                // The order of the dvnIdx is not required to be sequential, as enforcing the order may weaken\\n                // the composability of the options. e.g. if we refrain from enforcing the order, an OApp that has\\n                // already enforced certain options can append additional options to the end of the enforced\\n                // ones without restrictions.\\n                if (dvnIdx == 255) revert DVN_InvalidDVNIdx();\\n                if (!bitmap.get(dvnIdx)) {\\n                    ++numDVNs;\\n                    bitmap = bitmap.set(dvnIdx);\\n                }\\n\\n                cursor += optionLength;\\n            }\\n        }\\n        if (cursor != _options.length) revert DVN_InvalidDVNOptions(cursor);\\n    }\\n\\n    /// @dev decode the next dvn option from _options starting from the specified cursor\\n    /// @param _options the format is the same as groupDVNOptionsByIdx\\n    /// @param _cursor the cursor to start decoding\\n    /// @return optionType the type of the option\\n    /// @return option the option\\n    /// @return cursor the cursor to start decoding the next option\\n    function nextDVNOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor + 1); // skip dvn_idx\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 2; // skip option type and dvn_idx\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2beee03cdf59a9bc72e94d08b69cb2e908725f4ceabb48651494938100e21e35\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint256 end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint256 end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint256 end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\\n        unchecked {\\n            uint256 end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c0db161cef6603c3b256d4220f489419e7478ef775e52a80056654129c61875\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.20;\\n\\ntype BitMap256 is uint256;\\n\\nusing BitMaps for BitMap256 global;\\n\\nlibrary BitMaps {\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0xaad3c72ef43480d2253fd48b394e8fb7286d009991d2bc4e61be58ce48ac5ee9\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { CalldataBytesLib } from \\\"../../libs/CalldataBytesLib.sol\\\";\\n\\nlibrary ExecutorOptions {\\n    using CalldataBytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 1;\\n\\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\\n\\n    error Executor_InvalidLzReceiveOption();\\n    error Executor_InvalidNativeDropOption();\\n    error Executor_InvalidLzComposeOption();\\n\\n    /// @dev decode the next executor option from the options starting from the specified cursor\\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\\n    ///        executor_option = [option_size][option_type][option]\\n    ///        option_size = len(option_type) + len(option)\\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @param _cursor the cursor to start decoding from\\n    /// @return optionType the type of the option\\n    /// @return option the option of the executor\\n    /// @return cursor the cursor to start decoding the next executor option\\n    function nextExecutorOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor);\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 1; // skip option type\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n\\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        if (_option.length != 16 && _option.length != 32) revert Executor_InvalidLzReceiveOption();\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function decodeNativeDropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\\n        if (_option.length != 48) revert Executor_InvalidNativeDropOption();\\n        amount = _option.toU128(0);\\n        receiver = _option.toB32(16);\\n    }\\n\\n    function decodeLzComposeOption(\\n        bytes calldata _option\\n    ) internal pure returns (uint16 index, uint128 gas, uint128 value) {\\n        if (_option.length != 18 && _option.length != 34) revert Executor_InvalidLzComposeOption();\\n        index = _option.toU16(0);\\n        gas = _option.toU128(2);\\n        value = _option.length == 34 ? _option.toU128(18) : 0;\\n    }\\n\\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n\\n    function encodeNativeDropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_amount, _receiver);\\n    }\\n\\n    function encodeLzComposeOption(uint16 _index, uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_index, _gas) : abi.encodePacked(_index, _gas, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x621c6090fc432f94a99f677a95d72b75f56db89ddc5fc870669777a313587c28\",\"license\":\"LZBL-1.2\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd861907d1168dcaec2a7846edbaed12feb8bad2d6781dba987be01374f90b495\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"contracts/CrossChainRelayV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\nimport { OAppUpgradeable, MessagingFee, Origin, MessagingReceipt } from \\\"./layerzero/oapp/OAppUpgradeable.sol\\\";\\nimport { OAppOptionsType3Upgradeable } from \\\"./layerzero/oapp/libs/OAppOptionsType3Upgradeable.sol\\\";\\nimport { OptionsBuilder } from \\\"./layerzero/oapp/libs/OptionsBuilder.sol\\\";\\nimport { IOrderlyCrossChain, LzOption, IOrderlyCrossChainReceiver } from \\\"./interface/IOrderlyCrossChain.sol\\\";\\nimport { OrderlyCrossChainMessage } from \\\"./utils/OrderlyCrossChainMessage.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/// @notice OApp contract component for CrossChainRelayV2\\n/// @dev Seperate the OApp part from the CrossChainRelayV2\\nabstract contract OApp is OAppUpgradeable, OAppOptionsType3Upgradeable {\\n    /// @notice Nonce mapping for each source endpoint and sender address\\n    /// @dev This is used to prevent replay attacks\\n    /// @dev srcEid => sender => nonce\\n    mapping(uint32 => mapping(bytes32 => uint64)) public nonce;\\n\\n    /// @notice Maps message flow types to their gas limits for cross-chain operations\\n    /// @dev This is used to save the gas limit and value for each message method\\n    /// @dev The method is defined in OrderlyCrossChainMessage.CrossChainMethod\\n    mapping(uint8 => LzOption) public lzOptions;\\n\\n    /// @notice Gap to prevent storage collisions\\n    /// @dev This is used to prevent storage collisions\\n    /// @dev The gap is used to add new storage variables without breaking the storage layout\\n    /// @dev The above used slots + the rest of the slots are 50 (2 + 48)\\n    uint256[48] private __gap;\\n\\n    event MsgReceived(uint8 method);\\n\\n    /// @notice Emitted when a ping message is received\\n    event Ping();\\n\\n    /// @notice Emitted when a pong response is sent\\n    event Pong();\\n\\n    /// @notice Emitted when a message is received\\n    /// @param _origin The origin of the message\\n    /// @param _guid The guid of the message\\n    event ReceiveMesage(Origin _origin, bytes32 _guid);\\n\\n    /// @notice Default gas limit for cross-chain operations\\n    /// @dev This is used to set the default gas limit for cross-chain operations\\n    /// @dev The default gas limit is 3000000\\n    uint128 constant DEFAULT_GAS_LIMIT = 3000000;\\n\\n    /// @notice Options builder for the OApp\\n    /// @dev This is used to build the options for the OApp\\n    using OptionsBuilder for bytes;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the OApp\\n    /// @param _lzEndpoint The LayerZero endpoint\\n    /// @param _delegate The delegate, the owner of the contract and the delegate to the LayerZero endpoint\\n    function initialize(address _lzEndpoint, address _delegate) external virtual initializer {\\n        __initializeOApp(_lzEndpoint, _delegate);\\n    }\\n\\n    /// @notice Gets the next nonce for the given source endpoint and sender address\\n    /// @param _srcEid The source endpoint ID\\n    /// @param _sender The sender address\\n    /// @return The next nonce\\n    function nextNonce(uint32 _srcEid, bytes32 _sender) public view override returns (uint64) {\\n        return nonce[_srcEid][_sender] + 1;\\n    }\\n\\n    /// @notice Gets the LayerZero option for the given method\\n    /// @param _method The method\\n    /// @return The LayerZero option, if the lzGas is 0, it will use the default gas limit\\n    function getLzOption(uint8 _method) public view returns (bytes memory) {\\n        uint128 lzGas = lzOptions[_method].lzGas;\\n        uint128 lzValue = lzOptions[_method].lzValue;\\n\\n        if (lzGas == 0) {\\n            lzGas = DEFAULT_GAS_LIMIT;\\n        }\\n\\n        bytes memory lzOption = OptionsBuilder\\n            .newOptions()\\n            .addExecutorLzReceiveOption(lzGas, lzValue)\\n            .addExecutorOrderedExecutionOption();\\n        return lzOption;\\n    }\\n\\n    /// @notice Receive function to receive native tokens\\n    /// @dev This is used to receive native tokens to pay for LayerZero fees\\n    receive() external payable {}\\n}\\n\\n/// @notice Data storage layout for the CrossChainRelayV2 contract\\n/// @dev Separate contract to enforce proper storage layout with upgradeable contracts\\ncontract CrossChainRelayDataLayoutV2 {\\n    /// @notice Maps native chain IDs to their corresponding Endpoint IDs\\n    mapping(uint256 => uint32) public chainId2Eid;\\n\\n    /// @notice Reverse mapping of Endpoint IDs to native chain IDs\\n    mapping(uint32 => uint256) public eid2ChainId;\\n\\n    /// @notice Address of the cross-chain manager (Vault or Ledger) on this chain\\n    address public ccManager;\\n\\n    /// @notice Gap to prevent storage collisions\\n    /// @dev This is used to prevent storage collisions\\n    /// @dev The gap is used to add new storage variables without breaking the storage layout\\n    /// @dev The above used slots + the rest of the slots are 50 (3 + 47)\\n    uint256[47] private __gap;\\n}\\n\\n/// @notice CrossChainRelayV2 contract\\n/// @dev This is the main contract for the CrossChainRelayV2\\n/// @dev It implements the IOrderlyCrossChain interface\\n/// @dev It inherits from the OAppUpgradeable and CrossChainRelayDataLayoutV2\\ncontract CrossChainRelayV2 is IOrderlyCrossChain, OApp, CrossChainRelayDataLayoutV2 {\\n    /// @notice OrderlyCrossChainMessage library for the CrossChainRelayV2\\n    using OrderlyCrossChainMessage for OrderlyCrossChainMessage.MessageV1;\\n\\n    /// @notice Modifier to check if the nonce is valid\\n    /// @param _origin The origin of the message\\n    /// @dev This is used to prevent replay attacks\\n    /// @dev The received nonce is checked against the saved nonce in the CrossChainRelayDataLayoutV2\\n    /// @dev The saved nonce is incremented by 1 after the message is received\\n    modifier validNonce(Origin calldata _origin) {\\n        require(_origin.nonce == nonce[_origin.srcEid][_origin.sender] + 1, \\\"CrossChainRelayV2: invalid nonce\\\");\\n        nonce[_origin.srcEid][_origin.sender]++;\\n        _;\\n    }\\n\\n    /// @notice Modifier to check if the sender is the CC manager\\n    /// @dev This is used to prevent unauthorized access to the CrossChainRelayV2\\n    /// @dev The sender must be the ccManager\\n    /// @dev The ccManager is the address of the cross-chain manager (Vault or Ledger) on this chain\\n    modifier onlyCCManager() {\\n        require(msg.sender == ccManager, \\\"CrossChainRelayV2: only CC manager can call this function\\\");\\n        _;\\n    }\\n\\n    function initialize(address _lzEndpoint, address _delegate) external override initializer {\\n        __initializeOApp(_lzEndpoint, _delegate);\\n    }\\n\\n    /// @notice Internal function to receive messages from LayerZero\\n    /// @param _origin The origin of the message\\n    /// @dev The origin contains the following:\\n    /// @dev - srcEid: The source chain endpoint ID.\\n    /// @dev - sender: The sender address from the src chain.\\n    /// @dev - nonce: The nonce of the LayerZero message.\\n    /// @param _payload The payload of the message\\n    /// @param _guid The guid of the message\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _payload,\\n        address /*_executor*/,\\n        bytes calldata /*_extraData*/\\n    ) internal override validNonce(_origin) {\\n        (OrderlyCrossChainMessage.MessageV1 memory message, bytes memory payload) = OrderlyCrossChainMessage\\n            .decodeMessageV1AndPayload(_payload);\\n\\n        _receiveMessage(message, payload);\\n        emit MessageReceived(_origin, _guid);\\n    }\\n\\n    /// @notice Internal function to receive messages from LayerZero\\n    /// @param _message The message part of the cc message\\n    /// @param _payload The payload part of the cc message\\n    function _receiveMessage(OrderlyCrossChainMessage.MessageV1 memory _message, bytes memory _payload) internal {\\n        if (_message.method == uint8(OrderlyCrossChainMessage.CrossChainMethod.PingPong)) {\\n            // send pong back;\\n            ping(_message.srcChainId);\\n            emit Pong();\\n        } else if (_message.method == uint8(OrderlyCrossChainMessage.CrossChainMethod.Ping)) {\\n            emit Ping();\\n        } else {\\n            // Relay the message to the ccManager to handle\\n            IOrderlyCrossChainReceiver(ccManager).receiveMessage(_message, _payload);\\n        }\\n    }\\n\\n    // function receiveMessage(OrderlyCrossChainMessage.MessageV1 memory message, bytes memory payload) internal {}\\n\\n    /// @notice Adds a new chain ID mapping to LayerZero chain IDs\\n    /// @param _chainId The chain ID\\n    /// @param _eid The LayerZero EID\\n    function addChainIdMapping(uint256 _chainId, uint32 _eid) external onlyOwner {\\n        chainId2Eid[_chainId] = _eid;\\n        eid2ChainId[_eid] = _chainId;\\n    }\\n\\n    /// @notice Sets the manager address\\n    /// @param _ccManager The manager address\\n    function setCCManager(address _ccManager) external onlyOwner {\\n        ccManager = _ccManager;\\n    }\\n\\n    /// @notice Sets the method gas limit mapping\\n    /// @param _method The method to set the gas limit for\\n    /// @param _lzGas The gas limit for the transaction execution on the dst chain\\n    /// @param _lzValue The value to airdrop on the dst chain\\n    function setMethodOption(uint8 _method, uint128 _lzGas, uint128 _lzValue) external onlyOwner {\\n        lzOptions[_method] = LzOption({ lzGas: _lzGas, lzValue: _lzValue });\\n    }\\n\\n    /// @notice Estimates the gas fee for a cc message\\n    /// @param data The cross-chain meta data\\n    /// @param payload The payload of the cc message\\n    /// @return The gas fee for the cc message, in native gas token\\n    function estimateGasFee(\\n        OrderlyCrossChainMessage.MessageV1 memory data,\\n        bytes memory payload\\n    ) public view override returns (uint256) {\\n        bytes memory lzPayload = data.encodeMessageV1AndPayload(payload);\\n        uint32 dstEid = chainId2Eid[data.dstChainId];\\n        bytes memory lzOption = getLzOption(data.method);\\n        MessagingFee memory msgFee = _quote(dstEid, lzPayload, lzOption, false);\\n        return msgFee.nativeFee;\\n    }\\n\\n    /// @notice Sends a cross-chain message\\n    /// @param data The cross-chain meta data\\n    /// @param payload The payload of the cc message\\n    function sendMessage(\\n        OrderlyCrossChainMessage.MessageV1 memory data,\\n        bytes memory payload\\n    ) public payable override onlyCCManager {\\n        uint256 nativeFee = estimateGasFee(data, payload);\\n        MessagingReceipt memory receipt = _sendMessage(nativeFee, address(this), data, payload);\\n        emit MessageSent(receipt);\\n    }\\n\\n    /// @notice Sends a cross-chain message with fee\\n    /// @param data The cross-chain meta data\\n    /// @param payload The payload of the cc message\\n    function sendMessageWithFee(\\n        OrderlyCrossChainMessage.MessageV1 memory data,\\n        bytes memory payload\\n    ) public payable override onlyCCManager {\\n        uint256 nativeFee = estimateGasFee(data, payload);\\n        require(msg.value >= nativeFee, \\\"CrossChainRelay: insufficient fee\\\");\\n        MessagingReceipt memory receipt = _sendMessage(nativeFee, address(this), data, payload);\\n        emit MessageSent(receipt);\\n    }\\n\\n    /// @notice Sends a cross-chain message with fee\\n    /// @param refundReceiver The receiver address for the lz fee refund\\n    /// @param data The cross-chain meta data\\n    /// @param payload The payload of the cc message\\n    function sendMessageWithFeeRefund(\\n        address refundReceiver,\\n        OrderlyCrossChainMessage.MessageV1 memory data,\\n        bytes memory payload\\n    ) public payable override onlyCCManager {\\n        uint32 dstEid = chainId2Eid[data.dstChainId];\\n        require(dstEid != 0, \\\"CrossChainRelay: invalid dst chain id\\\");\\n\\n        uint256 nativeFee = estimateGasFee(data, payload);\\n        require(msg.value >= nativeFee, \\\"CrossChainRelay: insufficient fee\\\");\\n\\n        MessagingReceipt memory receipt = _sendMessage(nativeFee, payable(refundReceiver), data, payload);\\n\\n        emit MessageSent(receipt);\\n    }\\n\\n    /// @notice Sends a cross-chain message\\n    /// @param data The cross-chain meta data\\n    /// @param payload The payload of the cc message\\n    function _sendMessage(\\n        uint256 nativeFee,\\n        address refundReceiver,\\n        OrderlyCrossChainMessage.MessageV1 memory data,\\n        bytes memory payload\\n    ) internal returns (MessagingReceipt memory receipt) {\\n        uint32 dstEid = chainId2Eid[data.dstChainId];\\n        require(dstEid != 0, \\\"CrossChainRelay: invalid dst chain id\\\");\\n\\n        bytes memory lzPayload = data.encodeMessageV1AndPayload(payload);\\n        bytes memory lzOption = getLzOption(data.method);\\n\\n        receipt = _lzSend(\\n            dstEid,\\n            lzPayload,\\n            lzOption,\\n            MessagingFee({ nativeFee: nativeFee, lzTokenFee: 0 }),\\n            refundReceiver\\n        );\\n    }\\n\\n    /// @notice Tests a function, sends ping to another chain\\n    /// @param dstChainId The destination chain ID\\n    function ping(uint256 dstChainId) internal {\\n        OrderlyCrossChainMessage.MessageV1 memory data = OrderlyCrossChainMessage.MessageV1({\\n            method: uint8(OrderlyCrossChainMessage.CrossChainMethod.Ping),\\n            option: 0,\\n            payloadDataType: 0,\\n            srcCrossChainManager: address(0),\\n            dstCrossChainManager: address(0),\\n            srcChainId: block.chainid,\\n            dstChainId: dstChainId\\n        });\\n        uint256 nativeFee = estimateGasFee(data, bytes(\\\"\\\"));\\n        MessagingReceipt memory receipt = _sendMessage(nativeFee, address(this), data, bytes(\\\"\\\"));\\n        emit MessageSent(receipt);\\n    }\\n\\n    // ================================ ONLY OWNER FUNCTIONS ================================\\n    /// @notice Tests a function, sends ping to another chain and expects pong back\\n    /// @param dstChainId The destination chain ID\\n    function pingPong(uint256 dstChainId) external onlyOwner {\\n        OrderlyCrossChainMessage.MessageV1 memory data = OrderlyCrossChainMessage.MessageV1({\\n            method: uint8(OrderlyCrossChainMessage.CrossChainMethod.PingPong),\\n            option: 0,\\n            payloadDataType: 0,\\n            srcCrossChainManager: address(0),\\n            dstCrossChainManager: address(0),\\n            srcChainId: block.chainid,\\n            dstChainId: dstChainId\\n        });\\n        uint256 nativeFee = estimateGasFee(data, bytes(\\\"\\\"));\\n        MessagingReceipt memory receipt = _sendMessage(nativeFee, address(this), data, bytes(\\\"\\\"));\\n        emit MessageSent(receipt);\\n    }\\n\\n    /// @notice Withdraws native tokens from the contract\\n    /// @param to Recipient address\\n    /// @param amount Amount of native tokens to withdraw\\n    function withdrawNativeToken(address payable to, uint256 amount) external onlyOwner {\\n        require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n        (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    /// @notice Withdraws ERC20 tokens from the contract\\n    /// @param token Token address\\n    /// @param to Recipient address\\n    /// @param amount Amount of tokens to withdraw\\n    function withdrawToken(address token, address to, uint256 amount) external onlyOwner {\\n        IERC20(token).transfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xbea590ad144e6c6f3ac6aa6b8518d08eed82f051db4c2ac19b7b65d67092695d\",\"license\":\"MIT\"},\"contracts/interface/IOrderlyCrossChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/OrderlyCrossChainMessage.sol\\\";\\nimport { MessagingReceipt, Origin } from \\\"../layerzero/oapp/OAppUpgradeable.sol\\\";\\n\\nstruct LzOption {\\n    uint128 lzGas;\\n    uint128 lzValue;\\n}\\n\\n// Interface for the Cross Chain Operations\\ninterface IOrderlyCrossChain {\\n    // Event to be emitted when a message is sent\\n    event MessageSent(MessagingReceipt receipt);\\n\\n    // Event to be emitted when a message is received\\n    event MessageReceived(Origin origin, bytes32 guid);\\n\\n    /// @notice estimate gas fee\\n    /// @param data message data\\n    /// @param payload payload\\n    function estimateGasFee(\\n        OrderlyCrossChainMessage.MessageV1 memory data,\\n        bytes memory payload\\n    ) external view returns (uint256);\\n\\n    /// @notice send message\\n    /// @param message message\\n    /// @param payload payload\\n    function sendMessage(OrderlyCrossChainMessage.MessageV1 memory message, bytes memory payload) external payable;\\n\\n    /// @notice send message with fee, so no estimate gas fee will not run\\n    /// @param message message\\n    /// @param payload payload\\n    function sendMessageWithFee(\\n        OrderlyCrossChainMessage.MessageV1 memory message,\\n        bytes memory payload\\n    ) external payable;\\n\\n    /// @notice send message with fee, so no estimate gas fee will not run\\n    /// @param refundReceiver receiver of the refund\\n    /// @param message message\\n    /// @param payload payload\\n    function sendMessageWithFeeRefund(\\n        address refundReceiver,\\n        OrderlyCrossChainMessage.MessageV1 memory message,\\n        bytes memory payload\\n    ) external payable;\\n}\\n\\n// Interface for the Cross Chain Receiver (ccManager)\\ninterface IOrderlyCrossChainReceiver {\\n    /// @notice receive message from relay, relay will call this function to send messages\\n    /// @param message message\\n    /// @param payload payload\\n    function receiveMessage(OrderlyCrossChainMessage.MessageV1 memory message, bytes memory payload) external;\\n}\\n\",\"keccak256\":\"0x59b8bcec7825fae78a8ca7e1acbbe6c74fbd6f1ee0f9323e490921d7e3be84e5\",\"license\":\"MIT\"},\"contracts/layerzero/oapp/OAppCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCoreUpgradeable is IOAppCore, OwnableUpgradeable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /* ============================ Storage Slots + __gap == 50 ============================ */\\n    // @dev The gap to prevent storage collisions\\n    // @dev https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps\\n    // @dev New storage should be added below this line, and no exceeding 50 slots\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    function __initializeOAppCore(address _endpoint, address _delegate) internal onlyInitializing {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    function setPeers(uint32[] calldata _eids, bytes32[] calldata _peers) public virtual onlyOwner {\\n        require(_eids.length == _peers.length, \\\"OAppCore: Invalid input length\\\");\\n        for (uint256 i = 0; i < _eids.length; i++) {\\n            _setPeer(_eids[i], _peers[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x7faf569482e9f36d46f33759852a7cb69c997fcdfa7c0db6fe803fc9c34fa863\",\"license\":\"MIT\"},\"contracts/layerzero/oapp/OAppReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCoreUpgradeable } from \\\"./OAppCoreUpgradeable.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiverUpgradeable is IOAppReceiver, OAppCoreUpgradeable {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /* ============================ Storage Slots + __gap == 50 ============================ */\\n    // @dev The gap to prevent storage collisions\\n    // @dev https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps\\n    // @dev New storage should be added below this line, and no exceeding 50 slots\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x4df5084e8879948c776e899fc6c91bc4e8b6e0bd2093e3f2dc9134cfc8585dd6\",\"license\":\"MIT\"},\"contracts/layerzero/oapp/OAppSenderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCoreUpgradeable } from \\\"./OAppCoreUpgradeable.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSenderUpgradeable is OAppCoreUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /* ============================ Storage Slots + __gap == 50 ============================ */\\n    // @dev The gap to prevent storage collisions\\n    // @dev https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps\\n    // @dev New storage should be added below this line, and no exceeding 50 slots\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        // enable the OApp to pay the native fee\\n        if (msg.value < _nativeFee && address(this).balance < _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0xf28466847b11cb5cfdcd405aac3128e268e0344f7ccaecba9cd8aea9d8cdbbaa\",\"license\":\"MIT\"},\"contracts/layerzero/oapp/OAppUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSenderUpgradeable, MessagingFee, MessagingReceipt } from \\\"./OAppSenderUpgradeable.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiverUpgradeable, Origin } from \\\"./OAppReceiverUpgradeable.sol\\\";\\nimport { OAppCoreUpgradeable } from \\\"./OAppCoreUpgradeable.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OAppUpgradeable is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    OAppSenderUpgradeable,\\n    OAppReceiverUpgradeable\\n{\\n    /* ============================ Storage Slots + __gap == 50 ============================ */\\n    // @dev The gap to prevent storage collisions\\n    // @dev https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps\\n    // @dev New storage should be added below this line, and no exceeding 50 slots\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @dev Initializer for the upgradeable OApp with the provided endpoint and delegate(owner).\\n     * @param _endpoint The address of the LayerZero endpoint on LOCAL network.\\n     * @param _delegate The delegate address for the OApp on the endpoint.\\n     */\\n    function __initializeOApp(address _endpoint, address _delegate) internal virtual onlyInitializing {\\n        __initializeOAppCore(_endpoint, _delegate);\\n        __UUPSUpgradeable_init();\\n        __Pausable_init();\\n        __Ownable_init(_delegate);\\n    }\\n\\n    /**\\n     * @param newImplementation The address of deployed implementation\\n     * @dev Override with onlyOwner modifier to authrize the upgrade prcess\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSenderUpgradeable, OAppReceiverUpgradeable)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0x64a73e6aff11b6543cf0e83817b64398b1ce81e22f06f73012641deaca2db83b\",\"license\":\"MIT\"},\"contracts/layerzero/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"contracts/layerzero/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"contracts/layerzero/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"contracts/layerzero/oapp/libs/OAppOptionsType3Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3Upgradeable is IOAppOptionsType3, OwnableUpgradeable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /* ============================ Storage Slots + __gap == 50 ============================ */\\n    // @dev The gap to prevent storage collisions\\n    // @dev https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps\\n    // @dev New storage should be added below this line, and no exceeding 50 slots\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly (\\\"memory-safe\\\") {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0xeb8a8fa086a397b18f1dc346be091ff83599c758905f9fbd16b8504cd686168d\",\"license\":\"MIT\"},\"contracts/layerzero/oapp/libs/OptionsBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ExecutorOptions } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\\\";\\nimport { DVNOptions } from \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\\\";\\n\\n/**\\n * @title OptionsBuilder\\n * @dev Library for building and encoding various message options.\\n */\\nlibrary OptionsBuilder {\\n    using SafeCast for uint256;\\n    using BytesLib for bytes;\\n\\n    // Constants for options types\\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\\n    uint16 internal constant TYPE_3 = 3;\\n\\n    // Custom error message\\n    error InvalidSize(uint256 max, uint256 actual);\\n    error InvalidOptionType(uint16 optionType);\\n\\n    // Modifier to ensure only options of type 3 are used\\n    modifier onlyType3(bytes memory _options) {\\n        if (_options.toUint16(0) != TYPE_3) revert InvalidOptionType(_options.toUint16(0));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new options container with type 3.\\n     * @return options The newly created options container.\\n     */\\n    function newOptions() internal pure returns (bytes memory) {\\n        return abi.encodePacked(TYPE_3);\\n    }\\n\\n    /**\\n     * @dev Adds an executor LZ receive option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _gas The gasLimit used on the lzReceive() function in the OApp.\\n     * @param _value The msg.value passed to the lzReceive() function in the OApp.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed by the executor\\n     * eg. if (_gas: 200k, and _value: 1 ether) AND (_gas: 100k, _value: 0.5 ether) are sent in an option to the LayerZeroEndpoint,\\n     * that becomes (300k, 1.5 ether) when the message is executed on the remote lzReceive() function.\\n     */\\n    function addExecutorLzReceiveOption(\\n        bytes memory _options,\\n        uint128 _gas,\\n        uint128 _value\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeLzReceiveOption(_gas, _value);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZRECEIVE, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor native drop option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _amount The amount for the native value that is airdropped to the 'receiver'.\\n     * @param _receiver The receiver address for the native drop option.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed by the executor on the remote chain.\\n     */\\n    function addExecutorNativeDropOption(\\n        bytes memory _options,\\n        uint128 _amount,\\n        bytes32 _receiver\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeNativeDropOption(_amount, _receiver);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_NATIVE_DROP, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor LZ compose option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _index The index for the lzCompose() function call.\\n     * @param _gas The gasLimit for the lzCompose() function call.\\n     * @param _value The msg.value for the lzCompose() function call.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed PER index by the executor on the remote chain.\\n     * @dev If the OApp sends N lzCompose calls on the remote, you must provide N incremented indexes starting with 0.\\n     * ie. When your remote OApp composes (N = 3) messages, you must set this option for index 0,1,2\\n     */\\n    function addExecutorLzComposeOption(\\n        bytes memory _options,\\n        uint16 _index,\\n        uint128 _gas,\\n        uint128 _value\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeLzComposeOption(_index, _gas, _value);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZCOMPOSE, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor ordered execution option to the existing options.\\n     * @param _options The existing options container.\\n     * @return options The updated options container.\\n     */\\n    function addExecutorOrderedExecutionOption(\\n        bytes memory _options\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_ORDERED_EXECUTION, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Adds a DVN pre-crime option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _dvnIdx The DVN index for the pre-crime option.\\n     * @return options The updated options container.\\n     */\\n    function addDVNPreCrimeOption(\\n        bytes memory _options,\\n        uint8 _dvnIdx\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return addDVNOption(_options, _dvnIdx, DVNOptions.OPTION_TYPE_PRECRIME, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Adds an executor option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _optionType The type of the executor option.\\n     * @param _option The encoded data for the executor option.\\n     * @return options The updated options container.\\n     */\\n    function addExecutorOption(\\n        bytes memory _options,\\n        uint8 _optionType,\\n        bytes memory _option\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _options,\\n                ExecutorOptions.WORKER_ID,\\n                _option.length.toUint16() + 1, // +1 for optionType\\n                _optionType,\\n                _option\\n            );\\n    }\\n\\n    /**\\n     * @dev Adds a DVN option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _dvnIdx The DVN index for the DVN option.\\n     * @param _optionType The type of the DVN option.\\n     * @param _option The encoded data for the DVN option.\\n     * @return options The updated options container.\\n     */\\n    function addDVNOption(\\n        bytes memory _options,\\n        uint8 _dvnIdx,\\n        uint8 _optionType,\\n        bytes memory _option\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _options,\\n                DVNOptions.WORKER_ID,\\n                _option.length.toUint16() + 2, // +2 for optionType and dvnIdx\\n                _dvnIdx,\\n                _optionType,\\n                _option\\n            );\\n    }\\n\\n    /**\\n     * @dev Encodes legacy options of type 1.\\n     * @param _executionGas The gasLimit value passed to lzReceive().\\n     * @return legacyOptions The encoded legacy options.\\n     */\\n    function encodeLegacyOptionsType1(uint256 _executionGas) internal pure returns (bytes memory) {\\n        if (_executionGas > type(uint128).max) revert InvalidSize(type(uint128).max, _executionGas);\\n        return abi.encodePacked(TYPE_1, _executionGas);\\n    }\\n\\n    /**\\n     * @dev Encodes legacy options of type 2.\\n     * @param _executionGas The gasLimit value passed to lzReceive().\\n     * @param _nativeForDst The amount of native air dropped to the receiver.\\n     * @param _receiver The _nativeForDst receiver address.\\n     * @return legacyOptions The encoded legacy options of type 2.\\n     */\\n    function encodeLegacyOptionsType2(\\n        uint256 _executionGas,\\n        uint256 _nativeForDst,\\n        bytes memory _receiver // @dev Use bytes instead of bytes32 in legacy type 2 for _receiver.\\n    ) internal pure returns (bytes memory) {\\n        if (_executionGas > type(uint128).max) revert InvalidSize(type(uint128).max, _executionGas);\\n        if (_nativeForDst > type(uint128).max) revert InvalidSize(type(uint128).max, _nativeForDst);\\n        if (_receiver.length > 32) revert InvalidSize(32, _receiver.length);\\n        return abi.encodePacked(TYPE_2, _executionGas, _nativeForDst, _receiver);\\n    }\\n}\\n\",\"keccak256\":\"0x9ba881395fe0906e40d9222c318b8c74d45cc4035369db4a4c6c7d5de2c42378\",\"license\":\"MIT\"},\"contracts/utils/OrderlyCrossChainMessage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// Library to handle the conversion of the message structure to bytes array and vice versa\\nlibrary OrderlyCrossChainMessage {\\n    // List of methods that can be called cross-chain\\n    enum CrossChainOption {\\n        LayerZeroV1,\\n        LayerZeroV2\\n    }\\n\\n    enum CrossChainMethod {\\n        Deposit, // from vault to ledger\\n        Withdraw, // from ledger to vault\\n        WithdrawFinish, // from vault to ledger\\n        Ping, // for message testing\\n        PingPong, // ABA message testing\\n        RebalanceBurn, // burn request from ledger to vault\\n        RebalanceBurnFinish, // burn request finish from vault to ledger\\n        RebalanceMint, // mint request from ledger to vault\\n        RebalanceMintFinish, //  mint request finish from vault to ledger\\n        Withdraw2Contract // withdraw to contract address\\n    }\\n\\n    enum PayloadDataType {\\n        EventTypesWithdrawData,\\n        AccountTypesAccountDeposit,\\n        AccountTypesAccountWithdraw,\\n        VaultTypesVaultDeposit,\\n        VaultTypesVaultWithdraw,\\n        RebalanceBurnCCData,\\n        RebalanceBurnCCFinishData,\\n        RebalanceMintCCData,\\n        RebalanceMintCCFinishData,\\n        EventTypesWithdraw2Contract\\n    }\\n\\n    // The structure of the message\\n    struct MessageV1 {\\n        uint8 method; // enum CrossChainMethod to uint8\\n        uint8 option; // enum CrossChainOption to uint8\\n        uint8 payloadDataType; // enum PayloadDataType to uint8\\n        address srcCrossChainManager; // Source cross-chain manager address\\n        address dstCrossChainManager; // Target cross-chain manager address\\n        uint256 srcChainId; // Source blockchain ID\\n        uint256 dstChainId; // Target blockchain ID\\n    }\\n\\n    // Encode the message structure to bytes array\\n    function encodeMessageV1AndPayload(\\n        MessageV1 memory message,\\n        bytes memory payload\\n    ) internal pure returns (bytes memory) {\\n        return abi.encode(message, payload);\\n    }\\n\\n    // Decode the bytes array to message structure\\n    function decodeMessageV1AndPayload(bytes memory data) internal pure returns (MessageV1 memory, bytes memory) {\\n        (MessageV1 memory message, bytes memory payload) = abi.decode(data, (MessageV1, bytes));\\n        return (message, payload);\\n    }\\n}\\n\",\"keccak256\":\"0x9fb51d55fc00b13b68f480478c142b6ad0daa7fcb086317f562a7c7d8c1e4408\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000da565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000775760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6080516136ef62000104600039600081816117e701528181611810015261195101526136ef6000f3fe6080604052600436106102345760003560e01c80637d25a05e1161012e578063b223331c116100ab578063ca5eb5e11161006f578063ca5eb5e11461075a578063dab9d46f1461077a578063f2fde38b1461079a578063f5a4fff5146107ba578063ff7bd03d146107cd57600080fd5b8063b223331c1461067e578063b98bd070146106ac578063bb0b6a53146106cc578063bc70b354146106f9578063bf063b811461071957600080fd5b80638da5cb5b116100f25780638da5cb5b1461057c578063904b25eb146105b95780639dd118261461061a578063a1e3a4bd1461063a578063ad3cb1cc1461064d57600080fd5b80637d25a05e146104db57806382413eac146105135780638456cb5914610533578063884fd85e146105485780638aabaa9d1461055b57600080fd5b80634f1ef286116101bc5780635c975abb116101805780635c975abb1461041d5780635e280f111461044e578063641df3f914610486578063715018a6146104a657806373a1f1d5146104bb57600080fd5b80634f1ef2861461035157806352d1902d14610364578063536c6bfa146103875780635535d461146103a757806358851ca1146103d457600080fd5b80633772df58116102035780633772df58146102bc5780633d796f87146102dc5780633f4ba83a146102fc578063485cc955146103115780634a51e1071461033157600080fd5b806301e336671461024057806313137d651461026257806317442b70146102755780633400288b1461029c57600080fd5b3661023b57005b600080fd5b34801561024c57600080fd5b5061026061025b36600461261f565b6107ed565b005b6102606102703660046126ba565b61086e565b34801561028157600080fd5b50604080516001815260026020820152015b60405180910390f35b3480156102a857600080fd5b506102606102b7366004612772565b610910565b3480156102c857600080fd5b506102606102d73660046127e0565b610926565b3480156102e857600080fd5b506102606102f736600461284b565b6109df565b34801561030857600080fd5b50610260610a0a565b34801561031d57600080fd5b5061026061032c366004612868565b610a1c565b34801561033d57600080fd5b5061026061034c3660046128a1565b610b2b565b61026061035f3660046129c7565b610c29565b34801561037057600080fd5b50610379610c44565b604051908152602001610293565b34801561039357600080fd5b506102606103a2366004612a16565b610c61565b3480156103b357600080fd5b506103c76103c2366004612a46565b610d4a565b6040516102939190612ac9565b3480156103e057600080fd5b506104086103ef3660046128a1565b61012f6020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610293565b34801561042957600080fd5b5060008051602061369a8339815191525460ff165b6040519015158152602001610293565b34801561045a57600080fd5b5060005461046e906001600160a01b031681565b6040516001600160a01b039091168152602001610293565b34801561049257600080fd5b506103796104a1366004612b7c565b610def565b3480156104b257600080fd5b50610260610e45565b3480156104c757600080fd5b506103c76104d6366004612bb5565b610e57565b3480156104e757600080fd5b506104fb6104f6366004612772565b610ed5565b6040516001600160401b039091168152602001610293565b34801561051f57600080fd5b5061043e61052e366004612bd2565b610f11565b34801561053f57600080fd5b50610260610f26565b610260610556366004612b7c565b610f36565b34801561056757600080fd5b506101315461046e906001600160a01b031681565b34801561058857600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661046e565b3480156105c557600080fd5b506105fa6105d4366004612bb5565b60fe602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b03938416815292909116602083015201610293565b34801561062657600080fd5b50610260610635366004612c4f565b610f7d565b610260610648366004612b7c565b610fcf565b34801561065957600080fd5b506103c7604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561068a57600080fd5b50610379610699366004612c94565b6101306020526000908152604090205481565b3480156106b857600080fd5b506102606106c7366004612caf565b611036565b3480156106d857600080fd5b506103796106e7366004612c94565b60016020526000908152604090205481565b34801561070557600080fd5b506103c7610714366004612ce4565b611050565b34801561072557600080fd5b506104fb610734366004612772565b60fd6020908152600092835260408084209091529082529020546001600160401b031681565b34801561076657600080fd5b5061026061077536600461284b565b6111f8565b34801561078657600080fd5b50610260610795366004612d38565b61125b565b3480156107a657600080fd5b506102606107b536600461284b565b611298565b6102606107c8366004612d5b565b6112d6565b3480156107d957600080fd5b5061043e6107e8366004612dbd565b6113dc565b6107f5611412565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015610844573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108689190612dd9565b50505050565b6000546001600160a01b031633146108a0576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b602087018035906108ba906108b5908a612c94565b61146d565b146108f8576108cc6020880188612c94565b60405163309afaf360e21b815263ffffffff909116600482015260208801356024820152604401610897565b610907878787878787876114a9565b50505050505050565b610918611412565b610922828261166b565b5050565b61092e611412565b82811461097d5760405162461bcd60e51b815260206004820152601e60248201527f4f417070436f72653a20496e76616c696420696e707574206c656e67746800006044820152606401610897565b60005b838110156109d8576109d085858381811061099d5761099d612dfb565b90506020020160208101906109b29190612c94565b8484848181106109c4576109c4612dfb565b9050602002013561166b565b600101610980565b5050505050565b6109e7611412565b61013180546001600160a01b0319166001600160a01b0392909216919091179055565b610a12611412565b610a1a6116c0565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015610a615750825b90506000826001600160401b03166001148015610a7d5750303b155b905081158015610a8b575080155b15610aa95760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610ad357845460ff60401b1916600160401b1785555b610add8787611721565b831561090757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a150505050505050565b610b33611412565b6040805160e081019091526000908060045b60ff168152602001600060ff168152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b031681526020014681526020018381525090506000610ba88260405180602001604052806000815250610def565b90506000610bc78230856040518060200160405280600081525061174c565b60408051825181526020808401516001600160401b031681830152838301518051838501520151606082015290519192507f79e85cff32545bb6a42b53e5178562a9e9d13e273cb20196f2e8223c6ac96f78919081900360800190a150505050565b610c316117dc565b610c3a82611881565b6109228282611889565b6000610c4e611946565b5060008051602061367a83398151915290565b610c69611412565b80471015610cb05760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610897565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610cfd576040519150601f19603f3d011682016040523d82523d6000602084013e610d02565b606091505b5050905080610d455760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610897565b505050565b60ca60209081526000928352604080842090915290825290208054610d6e90612e11565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9a90612e11565b8015610de75780601f10610dbc57610100808354040283529160200191610de7565b820191906000526020600020905b815481529060010190602001808311610dca57829003601f168201915b505050505081565b600080610dfc848461198f565b60c0850151600090815261012f6020526040812054865192935063ffffffff1691610e2690610e57565b90506000610e3783858460006119bb565b519450505050505b92915050565b610e4d611412565b610a1a6000611a7a565b60ff8116600090815260fe60205260408120546060916001600160801b0380831692600160801b90041690829003610e9057622dc6c091505b6000610ecc610ec78484610ec060408051600360f01b602082015281516002818303018152602290910190915290565b9190611aeb565b611b53565b95945050505050565b63ffffffff8216600090815260fd60209081526040808320848452909152812054610f0a906001600160401b03166001612e5b565b9392505050565b6001600160a01b03811630145b949350505050565b610f2e611412565b610a1a611b9b565b610131546001600160a01b03163314610f615760405162461bcd60e51b815260040161089790612e7b565b6000610f6d8383610def565b90506000610bc78230868661174c565b610f85611412565b6040805180820182526001600160801b039384168152918316602080840191825260ff909516600090815260fe9095529320905192518216600160801b0292909116919091179055565b610131546001600160a01b03163314610ffa5760405162461bcd60e51b815260040161089790612e7b565b60006110068383610def565b9050803410156110285760405162461bcd60e51b815260040161089790612ed8565b6000610bc78230868661174c565b61103e611412565b61092261104b8284612f19565b611be4565b63ffffffff8416600090815260ca6020908152604080832061ffff8716845290915281208054606092919061108490612e11565b80601f01602080910402602001604051908101604052809291908181526020018280546110b090612e11565b80156110fd5780601f106110d2576101008083540402835291602001916110fd565b820191906000526020600020905b8154815290600101906020018083116110e057829003601f168201915b50505050509050805160000361114d5783838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929450610f1e9350505050565b600083900361115d579050610f1e565b600283106111db576111a484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ceb92505050565b806111b28460028188612fee565b6040516020016111c493929190613018565b604051602081830303815290604052915050610f1e565b8383604051639a6d49cd60e01b8152600401610897929190613040565b611200611412565b60005460405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b15801561124757600080fd5b505af11580156109d8573d6000803e3d6000fd5b611263611412565b600082815261012f60209081526040808320805463ffffffff90951663ffffffff199095168517905592825261013090522055565b6112a0611412565b6001600160a01b0381166112ca57604051631e4fbdf760e01b815260006004820152602401610897565b6112d381611a7a565b50565b610131546001600160a01b031633146113015760405162461bcd60e51b815260040161089790612e7b565b60c0820151600090815261012f602052604081205463ffffffff169081900361133c5760405162461bcd60e51b81526004016108979061306f565b60006113488484610def565b90508034101561136a5760405162461bcd60e51b815260040161089790612ed8565b60006113788287878761174c565b60408051825181526020808401516001600160401b031681830152838301518051838501520151606082015290519192507f79e85cff32545bb6a42b53e5178562a9e9d13e273cb20196f2e8223c6ac96f78919081900360800190a1505050505050565b60006020820180359060019083906113f49086612c94565b63ffffffff1681526020810191909152604001600020541492915050565b336114447f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610a1a5760405163118cdaa760e01b8152336004820152602401610897565b63ffffffff811660009081526001602052604081205480610e3f5760405163f6ff4fb760e01b815263ffffffff84166004820152602401610897565b8660fd60006114bb6020840184612c94565b63ffffffff168152602080820192909252604090810160009081208484013582529092529020546114f6906001600160401b03166001612e5b565b6001600160401b031661150f60608301604084016130c9565b6001600160401b0316146115655760405162461bcd60e51b815260206004820181905260248201527f43726f7373436861696e52656c617956323a20696e76616c6964206e6f6e63656044820152606401610897565b60fd60006115766020840184612c94565b63ffffffff16815260208082019290925260409081016000908120848401358252909252812080546001600160401b0316916115b1836130e6565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505060008061161888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d1792505050565b915091506116268282611d75565b7f4b08b1c97bde02a07f7bd1cee002766e4e78f8d78ae02c1a8fb6db898da0dd948a8a60405161165792919061310c565b60405180910390a150505050505050505050565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b6116c8611e5f565b60008051602061369a833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020015b60405180910390a150565b611729611e8f565b6117338282611ed8565b61173b611f51565b611743611f59565b61092281611f69565b6117546125c3565b60c0830151600090815261012f602052604081205463ffffffff169081900361178f5760405162461bcd60e51b81526004016108979061306f565b600061179b858561198f565b905060006117ac8660000151610e57565b90506117d083838360405180604001604052808d815260200160008152508b611f7a565b98975050505050505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061186357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661185760008051602061367a833981519152546001600160a01b031690565b6001600160a01b031614155b15610a1a5760405163703e46dd60e11b815260040160405180910390fd5b6112d3611412565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156118e3575060408051601f3d908101601f191682019092526118e091810190613155565b60015b61190b57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610897565b60008051602061367a833981519152811461193c57604051632a87526960e21b815260048101829052602401610897565b610d45838361206d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a1a5760405163703e46dd60e11b815260040160405180910390fd5b606082826040516020016119a492919061316e565b604051602081830303815290604052905092915050565b60408051808201909152600080825260208201526000546040805160a0810190915263ffffffff871681526001600160a01b039091169063ddc28c589060208101611a058961146d565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401611a3a9291906131dc565b6040805180830381865afa158015611a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecc91906132a3565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6060836003611afb8260006120c3565b61ffff1614611b2f57611b0f8160006120c3565b604051633a51740d60e01b815261ffff9091166004820152602401610897565b6000611b3b8585612120565b9050611b4986600183612187565b9695505050505050565b6060816003611b638260006120c3565b61ffff1614611b7757611b0f8160006120c3565b611b9283600460405180602001604052806000815250612187565b91505b50919050565b611ba36121f2565b60008051602061369a833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611702565b60005b8151811015611cbb57611c16828281518110611c0557611c05612dfb565b602002602001015160400151611ceb565b818181518110611c2857611c28612dfb565b60200260200101516040015160ca6000848481518110611c4a57611c4a612dfb565b60200260200101516000015163ffffffff1663ffffffff1681526020019081526020016000206000848481518110611c8457611c84612dfb565b60200260200101516020015161ffff1661ffff1681526020019081526020016000209081611cb29190613307565b50600101611be7565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b6748160405161171691906133c6565b600281015161ffff81166003146109225781604051639a6d49cd60e01b81526004016108979190612ac9565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152606060008084806020019051810190611d6991906134a1565b90969095509350505050565b815160ff1660031901611dbc57611d8f8260a00151612223565b6040517f4d015fcc2a20c24d7be893b3a525eac864b5a53a5f88ef7201a600465c73314e90600090a15050565b815160ff1660021901611df6576040517fca6e822df923f741dfe968d15d80a18abd25bd1e748bcb9ad81fea5bbb7386af90600090a15050565b610131546040516371b3dcb360e01b81526001600160a01b03909116906371b3dcb390611e29908590859060040161316e565b600060405180830381600087803b158015611e4357600080fd5b505af1158015611e57573d6000803e3d6000fd5b505050505050565b60008051602061369a8339815191525460ff16610a1a57604051638dfc202b60e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610a1a57604051631afcd79f60e31b815260040160405180910390fd5b611ee0611e8f565b600080546001600160a01b0319166001600160a01b03848116919091179091558116611f1f57604051632d618d8160e21b815260040160405180910390fd5b60005460405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401611e29565b610a1a611e8f565b611f61611e8f565b610a1a612239565b611f71611e8f565b6112d38161225a565b611f826125c3565b6000611f918460000151612262565b602085015190915015611fab57611fab8460200151612296565b6000546040805160a0810190915263ffffffff891681526001600160a01b0390911690632637a45090839060208101611fe38c61146d565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b815260040161201f9291906131dc565b60806040518083038185885af115801561203d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906120629190613561565b979650505050505050565b61207682612353565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156120bb57610d4582826123b8565b610922612425565b60006120d08260026135ab565b835110156121175760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606401610897565b50016002015190565b60606001600160801b0382161561216857604080516001600160801b0319608086811b8216602084015285901b16603082015201604051602081830303815290604052610f0a565b6040516001600160801b0319608085901b1660208201526030016119a4565b60608360036121978260006120c3565b61ffff16146121ab57611b0f8160006120c3565b8460016121b88551612444565b6121c39060016135be565b86866040516020016121d99594939291906135d9565b6040516020818303038152906040529150509392505050565b60008051602061369a8339815191525460ff1615610a1a5760405163d93c066560e01b815260040160405180910390fd5b6040805160e08101909152600090806003610b45565b612241611e8f565b60008051602061369a833981519152805460ff19169055565b6112a0611e8f565b6000813410801561227257508147105b15612292576040516304fb820960e51b8152346004820152602401610897565b5090565b60008060009054906101000a90046001600160a01b03166001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230e9190613640565b90506001600160a01b038116612337576040516329b99a9560e11b815260040160405180910390fd5b600054610922906001600160a01b038381169133911685612473565b806001600160a01b03163b60000361238957604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610897565b60008051602061367a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516123d5919061365d565b600060405180830381855af49150503d8060008114612410576040519150601f19603f3d011682016040523d82523d6000602084013e612415565b606091505b5091509150610ecc8583836124cd565b3415610a1a5760405163b398979f60e01b815260040160405180910390fd5b600061ffff821115612292576040516306dfcc6560e41b81526010600482015260248101839052604401610897565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610868908590612529565b6060826124e2576124dd8261259a565b610f0a565b81511580156124f957506001600160a01b0384163b155b1561252257604051639996b31560e01b81526001600160a01b0385166004820152602401610897565b5092915050565b600080602060008451602086016000885af18061254c576040513d6000823e3d81fd5b50506000513d91508115612564578060011415612571565b6001600160a01b0384163b155b1561086857604051635274afe760e01b81526001600160a01b0385166004820152602401610897565b8051156125aa5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b60405180606001604052806000801916815260200160006001600160401b03168152602001612605604051806040016040528060008152602001600081525090565b905290565b6001600160a01b03811681146112d357600080fd5b60008060006060848603121561263457600080fd5b833561263f8161260a565b9250602084013561264f8161260a565b929592945050506040919091013590565b600060608284031215611b9557600080fd5b60008083601f84011261268457600080fd5b5081356001600160401b0381111561269b57600080fd5b6020830191508360208285010111156126b357600080fd5b9250929050565b600080600080600080600060e0888a0312156126d557600080fd5b6126df8989612660565b96506060880135955060808801356001600160401b038082111561270257600080fd5b61270e8b838c01612672565b909750955060a08a013591506127238261260a565b90935060c0890135908082111561273957600080fd5b506127468a828b01612672565b989b979a50959850939692959293505050565b803563ffffffff8116811461276d57600080fd5b919050565b6000806040838503121561278557600080fd5b61278e83612759565b946020939093013593505050565b60008083601f8401126127ae57600080fd5b5081356001600160401b038111156127c557600080fd5b6020830191508360208260051b85010111156126b357600080fd5b600080600080604085870312156127f657600080fd5b84356001600160401b038082111561280d57600080fd5b6128198883890161279c565b9096509450602087013591508082111561283257600080fd5b5061283f8782880161279c565b95989497509550505050565b60006020828403121561285d57600080fd5b8135610f0a8161260a565b6000806040838503121561287b57600080fd5b82356128868161260a565b915060208301356128968161260a565b809150509250929050565b6000602082840312156128b357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156128f2576128f26128ba565b60405290565b604051606081016001600160401b03811182821017156128f2576128f26128ba565b604051601f8201601f191681016001600160401b0381118282101715612942576129426128ba565b604052919050565b60006001600160401b03821115612963576129636128ba565b50601f01601f191660200190565b600082601f83011261298257600080fd5b81356129956129908261294a565b61291a565b8181528460208386010111156129aa57600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156129da57600080fd5b82356129e58161260a565b915060208301356001600160401b03811115612a0057600080fd5b612a0c85828601612971565b9150509250929050565b60008060408385031215612a2957600080fd5b823561278e8161260a565b803561ffff8116811461276d57600080fd5b60008060408385031215612a5957600080fd5b612a6283612759565b9150612a7060208401612a34565b90509250929050565b60005b83811015612a94578181015183820152602001612a7c565b50506000910152565b60008151808452612ab5816020860160208601612a79565b601f01601f19169290920160200192915050565b602081526000610f0a6020830184612a9d565b60ff811681146112d357600080fd5b600060e08284031215612afd57600080fd5b612b056128d0565b90508135612b1281612adc565b81526020820135612b2281612adc565b60208201526040820135612b3581612adc565b60408201526060820135612b488161260a565b60608201526080820135612b5b8161260a565b8060808301525060a082013560a082015260c082013560c082015292915050565b6000806101008385031215612b9057600080fd5b612b9a8484612aeb565b915060e08301356001600160401b03811115612a0057600080fd5b600060208284031215612bc757600080fd5b8135610f0a81612adc565b60008060008060a08587031215612be857600080fd5b612bf28686612660565b935060608501356001600160401b03811115612c0d57600080fd5b612c1987828801612672565b9094509250506080850135612c2d8161260a565b939692955090935050565b80356001600160801b038116811461276d57600080fd5b600080600060608486031215612c6457600080fd5b8335612c6f81612adc565b9250612c7d60208501612c38565b9150612c8b60408501612c38565b90509250925092565b600060208284031215612ca657600080fd5b610f0a82612759565b60008060208385031215612cc257600080fd5b82356001600160401b03811115612cd857600080fd5b611d698582860161279c565b60008060008060608587031215612cfa57600080fd5b612d0385612759565b9350612d1160208601612a34565b925060408501356001600160401b03811115612d2c57600080fd5b61283f87828801612672565b60008060408385031215612d4b57600080fd5b82359150612a7060208401612759565b60008060006101208486031215612d7157600080fd5b8335612d7c8161260a565b9250612d8b8560208601612aeb565b91506101008401356001600160401b03811115612da757600080fd5b612db386828701612971565b9150509250925092565b600060608284031215612dcf57600080fd5b610f0a8383612660565b600060208284031215612deb57600080fd5b81518015158114610f0a57600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680612e2557607f821691505b602082108103611b9557634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6001600160401b0381811683821601908082111561252257612522612e45565b60208082526039908201527f43726f7373436861696e52656c617956323a206f6e6c79204343206d616e616760408201527f65722063616e2063616c6c20746869732066756e6374696f6e00000000000000606082015260800190565b60208082526021908201527f43726f7373436861696e52656c61793a20696e73756666696369656e742066656040820152606560f81b606082015260800190565b60006001600160401b0380841115612f3357612f336128ba565b8360051b6020612f4481830161291a565b868152918501918181019036841115612f5c57600080fd5b865b84811015612fe257803586811115612f765760008081fd5b88016060368290031215612f8a5760008081fd5b612f926128f8565b612f9b82612759565b8152612fa8868301612a34565b8682015260408083013589811115612fc05760008081fd5b612fcc36828601612971565b9183019190915250845250918301918301612f5e565b50979650505050505050565b60008085851115612ffe57600080fd5b8386111561300b57600080fd5b5050820193919092039150565b6000845161302a818460208901612a79565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208082526025908201527f43726f7373436861696e52656c61793a20696e76616c696420647374206368616040820152641a5b881a5960da1b606082015260800190565b6001600160401b03811681146112d357600080fd5b6000602082840312156130db57600080fd5b8135610f0a816130b4565b60006001600160401b0380831681810361310257613102612e45565b6001019392505050565b6080810163ffffffff61311e85612759565b168252602084013560208301526040840135613139816130b4565b6001600160401b03166040830152606090910191909152919050565b60006020828403121561316757600080fd5b5051919050565b600061010060ff855116835260ff602086015116602084015260ff6040860151166040840152606085015160018060a01b038082166060860152806080880151166080860152505060a085015160a084015260c085015160c08401528060e0840152610ecc81840185612a9d565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a0608084015261321260e0840182612a9d565b90506060850151603f198483030160a085015261322f8282612a9d565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561326757600080fd5b604051604081018181106001600160401b0382111715613289576132896128ba565b604052825181526020928301519281019290925250919050565b6000604082840312156132b557600080fd5b610f0a8383613255565b601f821115610d45576000816000526020600020601f850160051c810160208610156132e85750805b601f850160051c820191505b81811015611e57578281556001016132f4565b81516001600160401b03811115613320576133206128ba565b6133348161332e8454612e11565b846132bf565b602080601f83116001811461336957600084156133515750858301515b600019600386901b1c1916600185901b178555611e57565b600085815260208120601f198616915b8281101561339857888601518255948401946001909101908401613379565b50858210156133b65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561344357888303603f190185528151805163ffffffff1684528781015161ffff1688850152860151606087850181905261342f81860183612a9d565b9689019694505050908601906001016133ef565b509098975050505050505050565b805161276d8161260a565b600082601f83011261346d57600080fd5b815161347b6129908261294a565b81815284602083860101111561349057600080fd5b610f1e826020830160208701612a79565b6000808284036101008112156134b657600080fd5b60e08112156134c457600080fd5b506134cd6128d0565b83516134d881612adc565b815260208401516134e881612adc565b602082015260408401516134fb81612adc565b6040820152606084015161350e8161260a565b606082015261351f60808501613451565b608082015260a084015160a082015260c084015160c08201528092505060e08301516001600160401b0381111561355557600080fd5b612a0c8582860161345c565b60006080828403121561357357600080fd5b61357b6128f8565b82518152602083015161358d816130b4565b602082015261359f8460408501613255565b60408201529392505050565b80820180821115610e3f57610e3f612e45565b61ffff81811683821601908082111561252257612522612e45565b600086516135eb818460208b01612a79565b6001600160f81b031960f888811b82169285019283526001600160f01b031960f089901b16600184015286901b1660038201528351613631816004840160208801612a79565b01600401979650505050505050565b60006020828403121561365257600080fd5b8151610f0a8161260a565b6000825161366f818460208701612a79565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a26469706673582212209262ec4636b5f8efbbc9425116417a7b6b1551c6f13ed961593008a88bcfbd0d64736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106102345760003560e01c80637d25a05e1161012e578063b223331c116100ab578063ca5eb5e11161006f578063ca5eb5e11461075a578063dab9d46f1461077a578063f2fde38b1461079a578063f5a4fff5146107ba578063ff7bd03d146107cd57600080fd5b8063b223331c1461067e578063b98bd070146106ac578063bb0b6a53146106cc578063bc70b354146106f9578063bf063b811461071957600080fd5b80638da5cb5b116100f25780638da5cb5b1461057c578063904b25eb146105b95780639dd118261461061a578063a1e3a4bd1461063a578063ad3cb1cc1461064d57600080fd5b80637d25a05e146104db57806382413eac146105135780638456cb5914610533578063884fd85e146105485780638aabaa9d1461055b57600080fd5b80634f1ef286116101bc5780635c975abb116101805780635c975abb1461041d5780635e280f111461044e578063641df3f914610486578063715018a6146104a657806373a1f1d5146104bb57600080fd5b80634f1ef2861461035157806352d1902d14610364578063536c6bfa146103875780635535d461146103a757806358851ca1146103d457600080fd5b80633772df58116102035780633772df58146102bc5780633d796f87146102dc5780633f4ba83a146102fc578063485cc955146103115780634a51e1071461033157600080fd5b806301e336671461024057806313137d651461026257806317442b70146102755780633400288b1461029c57600080fd5b3661023b57005b600080fd5b34801561024c57600080fd5b5061026061025b36600461261f565b6107ed565b005b6102606102703660046126ba565b61086e565b34801561028157600080fd5b50604080516001815260026020820152015b60405180910390f35b3480156102a857600080fd5b506102606102b7366004612772565b610910565b3480156102c857600080fd5b506102606102d73660046127e0565b610926565b3480156102e857600080fd5b506102606102f736600461284b565b6109df565b34801561030857600080fd5b50610260610a0a565b34801561031d57600080fd5b5061026061032c366004612868565b610a1c565b34801561033d57600080fd5b5061026061034c3660046128a1565b610b2b565b61026061035f3660046129c7565b610c29565b34801561037057600080fd5b50610379610c44565b604051908152602001610293565b34801561039357600080fd5b506102606103a2366004612a16565b610c61565b3480156103b357600080fd5b506103c76103c2366004612a46565b610d4a565b6040516102939190612ac9565b3480156103e057600080fd5b506104086103ef3660046128a1565b61012f6020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610293565b34801561042957600080fd5b5060008051602061369a8339815191525460ff165b6040519015158152602001610293565b34801561045a57600080fd5b5060005461046e906001600160a01b031681565b6040516001600160a01b039091168152602001610293565b34801561049257600080fd5b506103796104a1366004612b7c565b610def565b3480156104b257600080fd5b50610260610e45565b3480156104c757600080fd5b506103c76104d6366004612bb5565b610e57565b3480156104e757600080fd5b506104fb6104f6366004612772565b610ed5565b6040516001600160401b039091168152602001610293565b34801561051f57600080fd5b5061043e61052e366004612bd2565b610f11565b34801561053f57600080fd5b50610260610f26565b610260610556366004612b7c565b610f36565b34801561056757600080fd5b506101315461046e906001600160a01b031681565b34801561058857600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661046e565b3480156105c557600080fd5b506105fa6105d4366004612bb5565b60fe602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b03938416815292909116602083015201610293565b34801561062657600080fd5b50610260610635366004612c4f565b610f7d565b610260610648366004612b7c565b610fcf565b34801561065957600080fd5b506103c7604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561068a57600080fd5b50610379610699366004612c94565b6101306020526000908152604090205481565b3480156106b857600080fd5b506102606106c7366004612caf565b611036565b3480156106d857600080fd5b506103796106e7366004612c94565b60016020526000908152604090205481565b34801561070557600080fd5b506103c7610714366004612ce4565b611050565b34801561072557600080fd5b506104fb610734366004612772565b60fd6020908152600092835260408084209091529082529020546001600160401b031681565b34801561076657600080fd5b5061026061077536600461284b565b6111f8565b34801561078657600080fd5b50610260610795366004612d38565b61125b565b3480156107a657600080fd5b506102606107b536600461284b565b611298565b6102606107c8366004612d5b565b6112d6565b3480156107d957600080fd5b5061043e6107e8366004612dbd565b6113dc565b6107f5611412565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015610844573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108689190612dd9565b50505050565b6000546001600160a01b031633146108a0576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b602087018035906108ba906108b5908a612c94565b61146d565b146108f8576108cc6020880188612c94565b60405163309afaf360e21b815263ffffffff909116600482015260208801356024820152604401610897565b610907878787878787876114a9565b50505050505050565b610918611412565b610922828261166b565b5050565b61092e611412565b82811461097d5760405162461bcd60e51b815260206004820152601e60248201527f4f417070436f72653a20496e76616c696420696e707574206c656e67746800006044820152606401610897565b60005b838110156109d8576109d085858381811061099d5761099d612dfb565b90506020020160208101906109b29190612c94565b8484848181106109c4576109c4612dfb565b9050602002013561166b565b600101610980565b5050505050565b6109e7611412565b61013180546001600160a01b0319166001600160a01b0392909216919091179055565b610a12611412565b610a1a6116c0565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015610a615750825b90506000826001600160401b03166001148015610a7d5750303b155b905081158015610a8b575080155b15610aa95760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610ad357845460ff60401b1916600160401b1785555b610add8787611721565b831561090757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a150505050505050565b610b33611412565b6040805160e081019091526000908060045b60ff168152602001600060ff168152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b031681526020014681526020018381525090506000610ba88260405180602001604052806000815250610def565b90506000610bc78230856040518060200160405280600081525061174c565b60408051825181526020808401516001600160401b031681830152838301518051838501520151606082015290519192507f79e85cff32545bb6a42b53e5178562a9e9d13e273cb20196f2e8223c6ac96f78919081900360800190a150505050565b610c316117dc565b610c3a82611881565b6109228282611889565b6000610c4e611946565b5060008051602061367a83398151915290565b610c69611412565b80471015610cb05760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610897565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610cfd576040519150601f19603f3d011682016040523d82523d6000602084013e610d02565b606091505b5050905080610d455760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610897565b505050565b60ca60209081526000928352604080842090915290825290208054610d6e90612e11565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9a90612e11565b8015610de75780601f10610dbc57610100808354040283529160200191610de7565b820191906000526020600020905b815481529060010190602001808311610dca57829003601f168201915b505050505081565b600080610dfc848461198f565b60c0850151600090815261012f6020526040812054865192935063ffffffff1691610e2690610e57565b90506000610e3783858460006119bb565b519450505050505b92915050565b610e4d611412565b610a1a6000611a7a565b60ff8116600090815260fe60205260408120546060916001600160801b0380831692600160801b90041690829003610e9057622dc6c091505b6000610ecc610ec78484610ec060408051600360f01b602082015281516002818303018152602290910190915290565b9190611aeb565b611b53565b95945050505050565b63ffffffff8216600090815260fd60209081526040808320848452909152812054610f0a906001600160401b03166001612e5b565b9392505050565b6001600160a01b03811630145b949350505050565b610f2e611412565b610a1a611b9b565b610131546001600160a01b03163314610f615760405162461bcd60e51b815260040161089790612e7b565b6000610f6d8383610def565b90506000610bc78230868661174c565b610f85611412565b6040805180820182526001600160801b039384168152918316602080840191825260ff909516600090815260fe9095529320905192518216600160801b0292909116919091179055565b610131546001600160a01b03163314610ffa5760405162461bcd60e51b815260040161089790612e7b565b60006110068383610def565b9050803410156110285760405162461bcd60e51b815260040161089790612ed8565b6000610bc78230868661174c565b61103e611412565b61092261104b8284612f19565b611be4565b63ffffffff8416600090815260ca6020908152604080832061ffff8716845290915281208054606092919061108490612e11565b80601f01602080910402602001604051908101604052809291908181526020018280546110b090612e11565b80156110fd5780601f106110d2576101008083540402835291602001916110fd565b820191906000526020600020905b8154815290600101906020018083116110e057829003601f168201915b50505050509050805160000361114d5783838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929450610f1e9350505050565b600083900361115d579050610f1e565b600283106111db576111a484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ceb92505050565b806111b28460028188612fee565b6040516020016111c493929190613018565b604051602081830303815290604052915050610f1e565b8383604051639a6d49cd60e01b8152600401610897929190613040565b611200611412565b60005460405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b15801561124757600080fd5b505af11580156109d8573d6000803e3d6000fd5b611263611412565b600082815261012f60209081526040808320805463ffffffff90951663ffffffff199095168517905592825261013090522055565b6112a0611412565b6001600160a01b0381166112ca57604051631e4fbdf760e01b815260006004820152602401610897565b6112d381611a7a565b50565b610131546001600160a01b031633146113015760405162461bcd60e51b815260040161089790612e7b565b60c0820151600090815261012f602052604081205463ffffffff169081900361133c5760405162461bcd60e51b81526004016108979061306f565b60006113488484610def565b90508034101561136a5760405162461bcd60e51b815260040161089790612ed8565b60006113788287878761174c565b60408051825181526020808401516001600160401b031681830152838301518051838501520151606082015290519192507f79e85cff32545bb6a42b53e5178562a9e9d13e273cb20196f2e8223c6ac96f78919081900360800190a1505050505050565b60006020820180359060019083906113f49086612c94565b63ffffffff1681526020810191909152604001600020541492915050565b336114447f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610a1a5760405163118cdaa760e01b8152336004820152602401610897565b63ffffffff811660009081526001602052604081205480610e3f5760405163f6ff4fb760e01b815263ffffffff84166004820152602401610897565b8660fd60006114bb6020840184612c94565b63ffffffff168152602080820192909252604090810160009081208484013582529092529020546114f6906001600160401b03166001612e5b565b6001600160401b031661150f60608301604084016130c9565b6001600160401b0316146115655760405162461bcd60e51b815260206004820181905260248201527f43726f7373436861696e52656c617956323a20696e76616c6964206e6f6e63656044820152606401610897565b60fd60006115766020840184612c94565b63ffffffff16815260208082019290925260409081016000908120848401358252909252812080546001600160401b0316916115b1836130e6565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505060008061161888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d1792505050565b915091506116268282611d75565b7f4b08b1c97bde02a07f7bd1cee002766e4e78f8d78ae02c1a8fb6db898da0dd948a8a60405161165792919061310c565b60405180910390a150505050505050505050565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b6116c8611e5f565b60008051602061369a833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020015b60405180910390a150565b611729611e8f565b6117338282611ed8565b61173b611f51565b611743611f59565b61092281611f69565b6117546125c3565b60c0830151600090815261012f602052604081205463ffffffff169081900361178f5760405162461bcd60e51b81526004016108979061306f565b600061179b858561198f565b905060006117ac8660000151610e57565b90506117d083838360405180604001604052808d815260200160008152508b611f7a565b98975050505050505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061186357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661185760008051602061367a833981519152546001600160a01b031690565b6001600160a01b031614155b15610a1a5760405163703e46dd60e11b815260040160405180910390fd5b6112d3611412565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156118e3575060408051601f3d908101601f191682019092526118e091810190613155565b60015b61190b57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610897565b60008051602061367a833981519152811461193c57604051632a87526960e21b815260048101829052602401610897565b610d45838361206d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a1a5760405163703e46dd60e11b815260040160405180910390fd5b606082826040516020016119a492919061316e565b604051602081830303815290604052905092915050565b60408051808201909152600080825260208201526000546040805160a0810190915263ffffffff871681526001600160a01b039091169063ddc28c589060208101611a058961146d565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401611a3a9291906131dc565b6040805180830381865afa158015611a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecc91906132a3565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6060836003611afb8260006120c3565b61ffff1614611b2f57611b0f8160006120c3565b604051633a51740d60e01b815261ffff9091166004820152602401610897565b6000611b3b8585612120565b9050611b4986600183612187565b9695505050505050565b6060816003611b638260006120c3565b61ffff1614611b7757611b0f8160006120c3565b611b9283600460405180602001604052806000815250612187565b91505b50919050565b611ba36121f2565b60008051602061369a833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611702565b60005b8151811015611cbb57611c16828281518110611c0557611c05612dfb565b602002602001015160400151611ceb565b818181518110611c2857611c28612dfb565b60200260200101516040015160ca6000848481518110611c4a57611c4a612dfb565b60200260200101516000015163ffffffff1663ffffffff1681526020019081526020016000206000848481518110611c8457611c84612dfb565b60200260200101516020015161ffff1661ffff1681526020019081526020016000209081611cb29190613307565b50600101611be7565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b6748160405161171691906133c6565b600281015161ffff81166003146109225781604051639a6d49cd60e01b81526004016108979190612ac9565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152606060008084806020019051810190611d6991906134a1565b90969095509350505050565b815160ff1660031901611dbc57611d8f8260a00151612223565b6040517f4d015fcc2a20c24d7be893b3a525eac864b5a53a5f88ef7201a600465c73314e90600090a15050565b815160ff1660021901611df6576040517fca6e822df923f741dfe968d15d80a18abd25bd1e748bcb9ad81fea5bbb7386af90600090a15050565b610131546040516371b3dcb360e01b81526001600160a01b03909116906371b3dcb390611e29908590859060040161316e565b600060405180830381600087803b158015611e4357600080fd5b505af1158015611e57573d6000803e3d6000fd5b505050505050565b60008051602061369a8339815191525460ff16610a1a57604051638dfc202b60e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610a1a57604051631afcd79f60e31b815260040160405180910390fd5b611ee0611e8f565b600080546001600160a01b0319166001600160a01b03848116919091179091558116611f1f57604051632d618d8160e21b815260040160405180910390fd5b60005460405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401611e29565b610a1a611e8f565b611f61611e8f565b610a1a612239565b611f71611e8f565b6112d38161225a565b611f826125c3565b6000611f918460000151612262565b602085015190915015611fab57611fab8460200151612296565b6000546040805160a0810190915263ffffffff891681526001600160a01b0390911690632637a45090839060208101611fe38c61146d565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b815260040161201f9291906131dc565b60806040518083038185885af115801561203d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906120629190613561565b979650505050505050565b61207682612353565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156120bb57610d4582826123b8565b610922612425565b60006120d08260026135ab565b835110156121175760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606401610897565b50016002015190565b60606001600160801b0382161561216857604080516001600160801b0319608086811b8216602084015285901b16603082015201604051602081830303815290604052610f0a565b6040516001600160801b0319608085901b1660208201526030016119a4565b60608360036121978260006120c3565b61ffff16146121ab57611b0f8160006120c3565b8460016121b88551612444565b6121c39060016135be565b86866040516020016121d99594939291906135d9565b6040516020818303038152906040529150509392505050565b60008051602061369a8339815191525460ff1615610a1a5760405163d93c066560e01b815260040160405180910390fd5b6040805160e08101909152600090806003610b45565b612241611e8f565b60008051602061369a833981519152805460ff19169055565b6112a0611e8f565b6000813410801561227257508147105b15612292576040516304fb820960e51b8152346004820152602401610897565b5090565b60008060009054906101000a90046001600160a01b03166001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230e9190613640565b90506001600160a01b038116612337576040516329b99a9560e11b815260040160405180910390fd5b600054610922906001600160a01b038381169133911685612473565b806001600160a01b03163b60000361238957604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610897565b60008051602061367a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516123d5919061365d565b600060405180830381855af49150503d8060008114612410576040519150601f19603f3d011682016040523d82523d6000602084013e612415565b606091505b5091509150610ecc8583836124cd565b3415610a1a5760405163b398979f60e01b815260040160405180910390fd5b600061ffff821115612292576040516306dfcc6560e41b81526010600482015260248101839052604401610897565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610868908590612529565b6060826124e2576124dd8261259a565b610f0a565b81511580156124f957506001600160a01b0384163b155b1561252257604051639996b31560e01b81526001600160a01b0385166004820152602401610897565b5092915050565b600080602060008451602086016000885af18061254c576040513d6000823e3d81fd5b50506000513d91508115612564578060011415612571565b6001600160a01b0384163b155b1561086857604051635274afe760e01b81526001600160a01b0385166004820152602401610897565b8051156125aa5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b60405180606001604052806000801916815260200160006001600160401b03168152602001612605604051806040016040528060008152602001600081525090565b905290565b6001600160a01b03811681146112d357600080fd5b60008060006060848603121561263457600080fd5b833561263f8161260a565b9250602084013561264f8161260a565b929592945050506040919091013590565b600060608284031215611b9557600080fd5b60008083601f84011261268457600080fd5b5081356001600160401b0381111561269b57600080fd5b6020830191508360208285010111156126b357600080fd5b9250929050565b600080600080600080600060e0888a0312156126d557600080fd5b6126df8989612660565b96506060880135955060808801356001600160401b038082111561270257600080fd5b61270e8b838c01612672565b909750955060a08a013591506127238261260a565b90935060c0890135908082111561273957600080fd5b506127468a828b01612672565b989b979a50959850939692959293505050565b803563ffffffff8116811461276d57600080fd5b919050565b6000806040838503121561278557600080fd5b61278e83612759565b946020939093013593505050565b60008083601f8401126127ae57600080fd5b5081356001600160401b038111156127c557600080fd5b6020830191508360208260051b85010111156126b357600080fd5b600080600080604085870312156127f657600080fd5b84356001600160401b038082111561280d57600080fd5b6128198883890161279c565b9096509450602087013591508082111561283257600080fd5b5061283f8782880161279c565b95989497509550505050565b60006020828403121561285d57600080fd5b8135610f0a8161260a565b6000806040838503121561287b57600080fd5b82356128868161260a565b915060208301356128968161260a565b809150509250929050565b6000602082840312156128b357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156128f2576128f26128ba565b60405290565b604051606081016001600160401b03811182821017156128f2576128f26128ba565b604051601f8201601f191681016001600160401b0381118282101715612942576129426128ba565b604052919050565b60006001600160401b03821115612963576129636128ba565b50601f01601f191660200190565b600082601f83011261298257600080fd5b81356129956129908261294a565b61291a565b8181528460208386010111156129aa57600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156129da57600080fd5b82356129e58161260a565b915060208301356001600160401b03811115612a0057600080fd5b612a0c85828601612971565b9150509250929050565b60008060408385031215612a2957600080fd5b823561278e8161260a565b803561ffff8116811461276d57600080fd5b60008060408385031215612a5957600080fd5b612a6283612759565b9150612a7060208401612a34565b90509250929050565b60005b83811015612a94578181015183820152602001612a7c565b50506000910152565b60008151808452612ab5816020860160208601612a79565b601f01601f19169290920160200192915050565b602081526000610f0a6020830184612a9d565b60ff811681146112d357600080fd5b600060e08284031215612afd57600080fd5b612b056128d0565b90508135612b1281612adc565b81526020820135612b2281612adc565b60208201526040820135612b3581612adc565b60408201526060820135612b488161260a565b60608201526080820135612b5b8161260a565b8060808301525060a082013560a082015260c082013560c082015292915050565b6000806101008385031215612b9057600080fd5b612b9a8484612aeb565b915060e08301356001600160401b03811115612a0057600080fd5b600060208284031215612bc757600080fd5b8135610f0a81612adc565b60008060008060a08587031215612be857600080fd5b612bf28686612660565b935060608501356001600160401b03811115612c0d57600080fd5b612c1987828801612672565b9094509250506080850135612c2d8161260a565b939692955090935050565b80356001600160801b038116811461276d57600080fd5b600080600060608486031215612c6457600080fd5b8335612c6f81612adc565b9250612c7d60208501612c38565b9150612c8b60408501612c38565b90509250925092565b600060208284031215612ca657600080fd5b610f0a82612759565b60008060208385031215612cc257600080fd5b82356001600160401b03811115612cd857600080fd5b611d698582860161279c565b60008060008060608587031215612cfa57600080fd5b612d0385612759565b9350612d1160208601612a34565b925060408501356001600160401b03811115612d2c57600080fd5b61283f87828801612672565b60008060408385031215612d4b57600080fd5b82359150612a7060208401612759565b60008060006101208486031215612d7157600080fd5b8335612d7c8161260a565b9250612d8b8560208601612aeb565b91506101008401356001600160401b03811115612da757600080fd5b612db386828701612971565b9150509250925092565b600060608284031215612dcf57600080fd5b610f0a8383612660565b600060208284031215612deb57600080fd5b81518015158114610f0a57600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680612e2557607f821691505b602082108103611b9557634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6001600160401b0381811683821601908082111561252257612522612e45565b60208082526039908201527f43726f7373436861696e52656c617956323a206f6e6c79204343206d616e616760408201527f65722063616e2063616c6c20746869732066756e6374696f6e00000000000000606082015260800190565b60208082526021908201527f43726f7373436861696e52656c61793a20696e73756666696369656e742066656040820152606560f81b606082015260800190565b60006001600160401b0380841115612f3357612f336128ba565b8360051b6020612f4481830161291a565b868152918501918181019036841115612f5c57600080fd5b865b84811015612fe257803586811115612f765760008081fd5b88016060368290031215612f8a5760008081fd5b612f926128f8565b612f9b82612759565b8152612fa8868301612a34565b8682015260408083013589811115612fc05760008081fd5b612fcc36828601612971565b9183019190915250845250918301918301612f5e565b50979650505050505050565b60008085851115612ffe57600080fd5b8386111561300b57600080fd5b5050820193919092039150565b6000845161302a818460208901612a79565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208082526025908201527f43726f7373436861696e52656c61793a20696e76616c696420647374206368616040820152641a5b881a5960da1b606082015260800190565b6001600160401b03811681146112d357600080fd5b6000602082840312156130db57600080fd5b8135610f0a816130b4565b60006001600160401b0380831681810361310257613102612e45565b6001019392505050565b6080810163ffffffff61311e85612759565b168252602084013560208301526040840135613139816130b4565b6001600160401b03166040830152606090910191909152919050565b60006020828403121561316757600080fd5b5051919050565b600061010060ff855116835260ff602086015116602084015260ff6040860151166040840152606085015160018060a01b038082166060860152806080880151166080860152505060a085015160a084015260c085015160c08401528060e0840152610ecc81840185612a9d565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a0608084015261321260e0840182612a9d565b90506060850151603f198483030160a085015261322f8282612a9d565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561326757600080fd5b604051604081018181106001600160401b0382111715613289576132896128ba565b604052825181526020928301519281019290925250919050565b6000604082840312156132b557600080fd5b610f0a8383613255565b601f821115610d45576000816000526020600020601f850160051c810160208610156132e85750805b601f850160051c820191505b81811015611e57578281556001016132f4565b81516001600160401b03811115613320576133206128ba565b6133348161332e8454612e11565b846132bf565b602080601f83116001811461336957600084156133515750858301515b600019600386901b1c1916600185901b178555611e57565b600085815260208120601f198616915b8281101561339857888601518255948401946001909101908401613379565b50858210156133b65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561344357888303603f190185528151805163ffffffff1684528781015161ffff1688850152860151606087850181905261342f81860183612a9d565b9689019694505050908601906001016133ef565b509098975050505050505050565b805161276d8161260a565b600082601f83011261346d57600080fd5b815161347b6129908261294a565b81815284602083860101111561349057600080fd5b610f1e826020830160208701612a79565b6000808284036101008112156134b657600080fd5b60e08112156134c457600080fd5b506134cd6128d0565b83516134d881612adc565b815260208401516134e881612adc565b602082015260408401516134fb81612adc565b6040820152606084015161350e8161260a565b606082015261351f60808501613451565b608082015260a084015160a082015260c084015160c08201528092505060e08301516001600160401b0381111561355557600080fd5b612a0c8582860161345c565b60006080828403121561357357600080fd5b61357b6128f8565b82518152602083015161358d816130b4565b602082015261359f8460408501613255565b60408201529392505050565b80820180821115610e3f57610e3f612e45565b61ffff81811683821601908082111561252257612522612e45565b600086516135eb818460208b01612a79565b6001600160f81b031960f888811b82169285019283526001600160f01b031960f089901b16600184015286901b1660038201528351613631816004840160208801612a79565b01600401979650505050505050565b60006020828403121561365257600080fd5b8151610f0a8161260a565b6000825161366f818460208701612a79565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a26469706673582212209262ec4636b5f8efbbc9425116417a7b6b1551c6f13ed961593008a88bcfbd0d64736f6c63430008160033",
  "devdoc": {
    "details": "This is the main contract for the CrossChainRelayV2It implements the IOrderlyCrossChain interfaceIt inherits from the OAppUpgradeable and CrossChainRelayDataLayoutV2",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "ReceiveMesage((uint32,bytes32,uint64),bytes32)": {
        "params": {
          "_guid": "The guid of the message",
          "_origin": "The origin of the message"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "addChainIdMapping(uint256,uint32)": {
        "params": {
          "_chainId": "The chain ID",
          "_eid": "The LayerZero EID"
        }
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "combineOptions(uint32,uint16,bytes)": {
        "details": "If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.",
        "params": {
          "_eid": "The endpoint ID.",
          "_extraOptions": "Additional options passed by the caller.",
          "_msgType": "The OAPP message type."
        },
        "returns": {
          "_0": "options The combination of caller specified options AND enforced options."
        }
      },
      "estimateGasFee((uint8,uint8,uint8,address,address,uint256,uint256),bytes)": {
        "params": {
          "data": "The cross-chain meta data",
          "payload": "The payload of the cc message"
        },
        "returns": {
          "_0": "The gas fee for the cc message, in native gas token"
        }
      },
      "getLzOption(uint8)": {
        "params": {
          "_method": "The method"
        },
        "returns": {
          "_0": "The LayerZero option, if the lzGas is 0, it will use the default gas limit"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_delegate": "The delegate, the owner of the contract and the delegate to the LayerZero endpoint",
          "_lzEndpoint": "The LayerZero endpoint"
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "params": {
          "_sender": "The sender address",
          "_srcEid": "The source endpoint ID"
        },
        "returns": {
          "_0": "The next nonce"
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pingPong(uint256)": {
        "params": {
          "dstChainId": "The destination chain ID"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sendMessage((uint8,uint8,uint8,address,address,uint256,uint256),bytes)": {
        "params": {
          "data": "The cross-chain meta data",
          "payload": "The payload of the cc message"
        }
      },
      "sendMessageWithFee((uint8,uint8,uint8,address,address,uint256,uint256),bytes)": {
        "params": {
          "data": "The cross-chain meta data",
          "payload": "The payload of the cc message"
        }
      },
      "sendMessageWithFeeRefund(address,(uint8,uint8,uint8,address,address,uint256,uint256),bytes)": {
        "params": {
          "data": "The cross-chain meta data",
          "payload": "The payload of the cc message",
          "refundReceiver": "The receiver address for the lz fee refund"
        }
      },
      "setCCManager(address)": {
        "params": {
          "_ccManager": "The manager address"
        }
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setEnforcedOptions((uint32,uint16,bytes)[])": {
        "details": "Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().",
        "params": {
          "_enforcedOptions": "An array of EnforcedOptionParam structures specifying enforced options."
        }
      },
      "setMethodOption(uint8,uint128,uint128)": {
        "params": {
          "_lzGas": "The gas limit for the transaction execution on the dst chain",
          "_lzValue": "The value to airdrop on the dst chain",
          "_method": "The method to set the gas limit for"
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdrawNativeToken(address,uint256)": {
        "params": {
          "amount": "Amount of native tokens to withdraw",
          "to": "Recipient address"
        }
      },
      "withdrawToken(address,address,uint256)": {
        "params": {
          "amount": "Amount of tokens to withdraw",
          "to": "Recipient address",
          "token": "Token address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Ping()": {
        "notice": "Emitted when a ping message is received"
      },
      "Pong()": {
        "notice": "Emitted when a pong response is sent"
      },
      "ReceiveMesage((uint32,bytes32,uint64),bytes32)": {
        "notice": "Emitted when a message is received"
      }
    },
    "kind": "user",
    "methods": {
      "addChainIdMapping(uint256,uint32)": {
        "notice": "Adds a new chain ID mapping to LayerZero chain IDs"
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "ccManager()": {
        "notice": "Address of the cross-chain manager (Vault or Ledger) on this chain"
      },
      "chainId2Eid(uint256)": {
        "notice": "Maps native chain IDs to their corresponding Endpoint IDs"
      },
      "combineOptions(uint32,uint16,bytes)": {
        "notice": "Combines options for a given endpoint and message type."
      },
      "eid2ChainId(uint32)": {
        "notice": "Reverse mapping of Endpoint IDs to native chain IDs"
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "estimateGasFee((uint8,uint8,uint8,address,address,uint256,uint256),bytes)": {
        "notice": "Estimates the gas fee for a cc message"
      },
      "getLzOption(uint8)": {
        "notice": "Gets the LayerZero option for the given method"
      },
      "initialize(address,address)": {
        "notice": "Initializes the OApp"
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "lzOptions(uint8)": {
        "notice": "Maps message flow types to their gas limits for cross-chain operations"
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Gets the next nonce for the given source endpoint and sender address"
      },
      "nonce(uint32,bytes32)": {
        "notice": "Nonce mapping for each source endpoint and sender address"
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "pingPong(uint256)": {
        "notice": "Tests a function, sends ping to another chain and expects pong back"
      },
      "sendMessage((uint8,uint8,uint8,address,address,uint256,uint256),bytes)": {
        "notice": "Sends a cross-chain message"
      },
      "sendMessageWithFee((uint8,uint8,uint8,address,address,uint256,uint256),bytes)": {
        "notice": "Sends a cross-chain message with fee"
      },
      "sendMessageWithFeeRefund(address,(uint8,uint8,uint8,address,address,uint256,uint256),bytes)": {
        "notice": "Sends a cross-chain message with fee"
      },
      "setCCManager(address)": {
        "notice": "Sets the manager address"
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setMethodOption(uint8,uint128,uint128)": {
        "notice": "Sets the method gas limit mapping"
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      },
      "withdrawNativeToken(address,uint256)": {
        "notice": "Withdraws native tokens from the contract"
      },
      "withdrawToken(address,address,uint256)": {
        "notice": "Withdraws ERC20 tokens from the contract"
      }
    },
    "notice": "CrossChainRelayV2 contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6660,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "endpoint",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ILayerZeroEndpointV2)695"
      },
      {
        "astId": 6664,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 6668,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7011,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6847,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7206,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7452,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "enforcedOptions",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))"
      },
      {
        "astId": 7456,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5757,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "nonce",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_uint64))"
      },
      {
        "astId": 5763,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "lzOptions",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_uint8,t_struct(LzOption)6582_storage)"
      },
      {
        "astId": 5768,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 5894,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "chainId2Eid",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 5899,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "eid2ChainId",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 5902,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "ccManager",
        "offset": 0,
        "slot": "305",
        "type": "t_address"
      },
      {
        "astId": 5907,
        "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "306",
        "type": "t_array(t_uint256)47_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ILayerZeroEndpointV2)695": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpointV2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_mapping(t_bytes32,t_uint64))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bytes32 => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint64)"
      },
      "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_struct(LzOption)6582_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct LzOption)",
        "numberOfBytes": "32",
        "value": "t_struct(LzOption)6582_storage"
      },
      "t_struct(LzOption)6582_storage": {
        "encoding": "inplace",
        "label": "struct LzOption",
        "members": [
          {
            "astId": 6579,
            "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
            "label": "lzGas",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6581,
            "contract": "contracts/CrossChainRelayV2.sol:CrossChainRelayV2",
            "label": "lzValue",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}